// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: api/survey.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SurveyContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode              string            `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	PreviousResponses []*SurveyResponse `protobuf:"bytes,2,rep,name=previous_responses,json=previousResponses,proto3" json:"previous_responses,omitempty"`
}

func (x *SurveyContext) Reset() {
	*x = SurveyContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyContext) ProtoMessage() {}

func (x *SurveyContext) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyContext.ProtoReflect.Descriptor instead.
func (*SurveyContext) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{0}
}

func (x *SurveyContext) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *SurveyContext) GetPreviousResponses() []*SurveyResponse {
	if x != nil {
		return x.PreviousResponses
	}
	return nil
}

// expression that define how the survey context should be generated by the
// server
type SurveyContextDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode              *ExpressionArg `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	PreviousResponses []*Expression  `protobuf:"bytes,4,rep,name=previous_responses,json=previousResponses,proto3" json:"previous_responses,omitempty"`
}

func (x *SurveyContextDef) Reset() {
	*x = SurveyContextDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyContextDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyContextDef) ProtoMessage() {}

func (x *SurveyContextDef) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyContextDef.ProtoReflect.Descriptor instead.
func (*SurveyContextDef) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{1}
}

func (x *SurveyContextDef) GetMode() *ExpressionArg {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *SurveyContextDef) GetPreviousResponses() []*Expression {
	if x != nil {
		return x.PreviousResponses
	}
	return nil
}

type Survey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            []*LocalisedObject `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty"`
	Current         *SurveyVersion     `protobuf:"bytes,3,opt,name=current,proto3" json:"current,omitempty"`
	History         []*SurveyVersion   `protobuf:"bytes,4,rep,name=history,proto3" json:"history,omitempty"`
	Description     []*LocalisedObject `protobuf:"bytes,5,rep,name=description,proto3" json:"description,omitempty"`
	PrefillRules    []*Expression      `protobuf:"bytes,6,rep,name=prefill_rules,json=prefillRules,proto3" json:"prefill_rules,omitempty"`
	ContextRules    *SurveyContextDef  `protobuf:"bytes,7,opt,name=context_rules,json=contextRules,proto3" json:"context_rules,omitempty"`
	MaxItemsPerPage *MaxItemsPerPage   `protobuf:"bytes,8,opt,name=max_items_per_page,json=maxItemsPerPage,proto3" json:"max_items_per_page,omitempty"`
}

func (x *Survey) Reset() {
	*x = Survey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Survey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Survey) ProtoMessage() {}

func (x *Survey) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Survey.ProtoReflect.Descriptor instead.
func (*Survey) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{2}
}

func (x *Survey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Survey) GetName() []*LocalisedObject {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Survey) GetCurrent() *SurveyVersion {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *Survey) GetHistory() []*SurveyVersion {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *Survey) GetDescription() []*LocalisedObject {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Survey) GetPrefillRules() []*Expression {
	if x != nil {
		return x.PrefillRules
	}
	return nil
}

func (x *Survey) GetContextRules() *SurveyContextDef {
	if x != nil {
		return x.ContextRules
	}
	return nil
}

func (x *Survey) GetMaxItemsPerPage() *MaxItemsPerPage {
	if x != nil {
		return x.MaxItemsPerPage
	}
	return nil
}

type MaxItemsPerPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Large int32 `protobuf:"varint,1,opt,name=large,proto3" json:"large,omitempty"`
	Small int32 `protobuf:"varint,2,opt,name=small,proto3" json:"small,omitempty"`
}

func (x *MaxItemsPerPage) Reset() {
	*x = MaxItemsPerPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxItemsPerPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxItemsPerPage) ProtoMessage() {}

func (x *MaxItemsPerPage) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxItemsPerPage.ProtoReflect.Descriptor instead.
func (*MaxItemsPerPage) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{3}
}

func (x *MaxItemsPerPage) GetLarge() int32 {
	if x != nil {
		return x.Large
	}
	return 0
}

func (x *MaxItemsPerPage) GetSmall() int32 {
	if x != nil {
		return x.Small
	}
	return 0
}

type SurveyVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Published        int64       `protobuf:"varint,1,opt,name=published,proto3" json:"published,omitempty"`
	Unpublished      int64       `protobuf:"varint,2,opt,name=unpublished,proto3" json:"unpublished,omitempty"`
	SurveyDefinition *SurveyItem `protobuf:"bytes,3,opt,name=survey_definition,json=surveyDefinition,proto3" json:"survey_definition,omitempty"`
}

func (x *SurveyVersion) Reset() {
	*x = SurveyVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyVersion) ProtoMessage() {}

func (x *SurveyVersion) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyVersion.ProtoReflect.Descriptor instead.
func (*SurveyVersion) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{4}
}

func (x *SurveyVersion) GetPublished() int64 {
	if x != nil {
		return x.Published
	}
	return 0
}

func (x *SurveyVersion) GetUnpublished() int64 {
	if x != nil {
		return x.Unpublished
	}
	return 0
}

func (x *SurveyVersion) GetSurveyDefinition() *SurveyItem {
	if x != nil {
		return x.SurveyDefinition
	}
	return nil
}

type SurveyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key         string      `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Follows     []string    `protobuf:"bytes,3,rep,name=follows,proto3" json:"follows,omitempty"`
	Condition   *Expression `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	Priority    float32     `protobuf:"fixed32,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Version     int32       `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	VersionTags []string    `protobuf:"bytes,7,rep,name=version_tags,json=versionTags,proto3" json:"version_tags,omitempty"`
	// Question group attributes ->
	Items           []*SurveyItem `protobuf:"bytes,8,rep,name=items,proto3" json:"items,omitempty"`
	SelectionMethod *Expression   `protobuf:"bytes,9,opt,name=selection_method,json=selectionMethod,proto3" json:"selection_method,omitempty"`
	// Question attributes ->
	Type        string         `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`             // item/question type
	Components  *ItemComponent `protobuf:"bytes,11,opt,name=components,proto3" json:"components,omitempty"` // is a group component
	Validations []*Validation  `protobuf:"bytes,12,rep,name=validations,proto3" json:"validations,omitempty"`
}

func (x *SurveyItem) Reset() {
	*x = SurveyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyItem) ProtoMessage() {}

func (x *SurveyItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyItem.ProtoReflect.Descriptor instead.
func (*SurveyItem) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{5}
}

func (x *SurveyItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SurveyItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SurveyItem) GetFollows() []string {
	if x != nil {
		return x.Follows
	}
	return nil
}

func (x *SurveyItem) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *SurveyItem) GetPriority() float32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SurveyItem) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SurveyItem) GetVersionTags() []string {
	if x != nil {
		return x.VersionTags
	}
	return nil
}

func (x *SurveyItem) GetItems() []*SurveyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SurveyItem) GetSelectionMethod() *Expression {
	if x != nil {
		return x.SelectionMethod
	}
	return nil
}

func (x *SurveyItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SurveyItem) GetComponents() *ItemComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *SurveyItem) GetValidations() []*Validation {
	if x != nil {
		return x.Validations
	}
	return nil
}

type Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type string      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // hard or softvalidation
	Rule *Expression `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Validation) Reset() {
	*x = Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validation) ProtoMessage() {}

func (x *Validation) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validation.ProtoReflect.Descriptor instead.
func (*Validation) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{6}
}

func (x *Validation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Validation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Validation) GetRule() *Expression {
	if x != nil {
		return x.Rule
	}
	return nil
}

type ItemComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role             string             `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Key              string             `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Content          []*LocalisedObject `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	DisplayCondition *Expression        `protobuf:"bytes,4,opt,name=display_condition,json=displayCondition,proto3" json:"display_condition,omitempty"`
	Disabled         *Expression        `protobuf:"bytes,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// group component
	Items []*ItemComponent `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
	Order *Expression      `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	// response compontent
	Dtype       string                    `protobuf:"bytes,8,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Style       []*ItemComponent_Style    `protobuf:"bytes,9,rep,name=style,proto3" json:"style,omitempty"`
	Description []*LocalisedObject        `protobuf:"bytes,10,rep,name=description,proto3" json:"description,omitempty"`
	Properties  *ItemComponent_Properties `protobuf:"bytes,11,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *ItemComponent) Reset() {
	*x = ItemComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemComponent) ProtoMessage() {}

func (x *ItemComponent) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemComponent.ProtoReflect.Descriptor instead.
func (*ItemComponent) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{7}
}

func (x *ItemComponent) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ItemComponent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ItemComponent) GetContent() []*LocalisedObject {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ItemComponent) GetDisplayCondition() *Expression {
	if x != nil {
		return x.DisplayCondition
	}
	return nil
}

func (x *ItemComponent) GetDisabled() *Expression {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *ItemComponent) GetItems() []*ItemComponent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ItemComponent) GetOrder() *Expression {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ItemComponent) GetDtype() string {
	if x != nil {
		return x.Dtype
	}
	return ""
}

func (x *ItemComponent) GetStyle() []*ItemComponent_Style {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *ItemComponent) GetDescription() []*LocalisedObject {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ItemComponent) GetProperties() *ItemComponent_Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type LocalisedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // locale code
	// for texts:
	Parts []*ExpressionArg `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *LocalisedObject) Reset() {
	*x = LocalisedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalisedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalisedObject) ProtoMessage() {}

func (x *LocalisedObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalisedObject.ProtoReflect.Descriptor instead.
func (*LocalisedObject) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{8}
}

func (x *LocalisedObject) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *LocalisedObject) GetParts() []*ExpressionArg {
	if x != nil {
		return x.Parts
	}
	return nil
}

type ItemComponent_Style struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ItemComponent_Style) Reset() {
	*x = ItemComponent_Style{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemComponent_Style) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemComponent_Style) ProtoMessage() {}

func (x *ItemComponent_Style) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemComponent_Style.ProtoReflect.Descriptor instead.
func (*ItemComponent_Style) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ItemComponent_Style) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ItemComponent_Style) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ItemComponent_Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min           *ExpressionArg `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max           *ExpressionArg `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	StepSize      *ExpressionArg `protobuf:"bytes,3,opt,name=stepSize,proto3" json:"stepSize,omitempty"`
	DateInputMode *ExpressionArg `protobuf:"bytes,4,opt,name=dateInputMode,proto3" json:"dateInputMode,omitempty"`
}

func (x *ItemComponent_Properties) Reset() {
	*x = ItemComponent_Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_survey_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemComponent_Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemComponent_Properties) ProtoMessage() {}

func (x *ItemComponent_Properties) ProtoReflect() protoreflect.Message {
	mi := &file_api_survey_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemComponent_Properties.ProtoReflect.Descriptor instead.
func (*ItemComponent_Properties) Descriptor() ([]byte, []int) {
	return file_api_survey_proto_rawDescGZIP(), []int{7, 1}
}

func (x *ItemComponent_Properties) GetMin() *ExpressionArg {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ItemComponent_Properties) GetMax() *ExpressionArg {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *ItemComponent_Properties) GetStepSize() *ExpressionArg {
	if x != nil {
		return x.StepSize
	}
	return nil
}

func (x *ItemComponent_Properties) GetDateInputMode() *ExpressionArg {
	if x != nil {
		return x.DateInputMode
	}
	return nil
}

var File_api_survey_proto protoreflect.FileDescriptor

var file_api_survey_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x1a, 0x14,
	0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x77, 0x0a, 0x0d, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x66, 0x12, 0x32, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xc1, 0x03,
	0x0a, 0x06, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x66, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x4d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x22, 0x94, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x03, 0x0a, 0x0a, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0xcb, 0x06, 0x0a, 0x0d, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x2f, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xf2, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x67, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_survey_proto_rawDescOnce sync.Once
	file_api_survey_proto_rawDescData = file_api_survey_proto_rawDesc
)

func file_api_survey_proto_rawDescGZIP() []byte {
	file_api_survey_proto_rawDescOnce.Do(func() {
		file_api_survey_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_survey_proto_rawDescData)
	})
	return file_api_survey_proto_rawDescData
}

var file_api_survey_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_survey_proto_goTypes = []interface{}{
	(*SurveyContext)(nil),            // 0: inf.survey.SurveyContext
	(*SurveyContextDef)(nil),         // 1: inf.survey.SurveyContextDef
	(*Survey)(nil),                   // 2: inf.survey.Survey
	(*MaxItemsPerPage)(nil),          // 3: inf.survey.MaxItemsPerPage
	(*SurveyVersion)(nil),            // 4: inf.survey.SurveyVersion
	(*SurveyItem)(nil),               // 5: inf.survey.SurveyItem
	(*Validation)(nil),               // 6: inf.survey.Validation
	(*ItemComponent)(nil),            // 7: inf.survey.ItemComponent
	(*LocalisedObject)(nil),          // 8: inf.survey.LocalisedObject
	(*ItemComponent_Style)(nil),      // 9: inf.survey.ItemComponent.Style
	(*ItemComponent_Properties)(nil), // 10: inf.survey.ItemComponent.Properties
	(*SurveyResponse)(nil),           // 11: inf.survey_response.SurveyResponse
	(*ExpressionArg)(nil),            // 12: inf.expressions.ExpressionArg
	(*Expression)(nil),               // 13: inf.expressions.Expression
}
var file_api_survey_proto_depIdxs = []int32{
	11, // 0: inf.survey.SurveyContext.previous_responses:type_name -> inf.survey_response.SurveyResponse
	12, // 1: inf.survey.SurveyContextDef.mode:type_name -> inf.expressions.ExpressionArg
	13, // 2: inf.survey.SurveyContextDef.previous_responses:type_name -> inf.expressions.Expression
	8,  // 3: inf.survey.Survey.name:type_name -> inf.survey.LocalisedObject
	4,  // 4: inf.survey.Survey.current:type_name -> inf.survey.SurveyVersion
	4,  // 5: inf.survey.Survey.history:type_name -> inf.survey.SurveyVersion
	8,  // 6: inf.survey.Survey.description:type_name -> inf.survey.LocalisedObject
	13, // 7: inf.survey.Survey.prefill_rules:type_name -> inf.expressions.Expression
	1,  // 8: inf.survey.Survey.context_rules:type_name -> inf.survey.SurveyContextDef
	3,  // 9: inf.survey.Survey.max_items_per_page:type_name -> inf.survey.MaxItemsPerPage
	5,  // 10: inf.survey.SurveyVersion.survey_definition:type_name -> inf.survey.SurveyItem
	13, // 11: inf.survey.SurveyItem.condition:type_name -> inf.expressions.Expression
	5,  // 12: inf.survey.SurveyItem.items:type_name -> inf.survey.SurveyItem
	13, // 13: inf.survey.SurveyItem.selection_method:type_name -> inf.expressions.Expression
	7,  // 14: inf.survey.SurveyItem.components:type_name -> inf.survey.ItemComponent
	6,  // 15: inf.survey.SurveyItem.validations:type_name -> inf.survey.Validation
	13, // 16: inf.survey.Validation.rule:type_name -> inf.expressions.Expression
	8,  // 17: inf.survey.ItemComponent.content:type_name -> inf.survey.LocalisedObject
	13, // 18: inf.survey.ItemComponent.display_condition:type_name -> inf.expressions.Expression
	13, // 19: inf.survey.ItemComponent.disabled:type_name -> inf.expressions.Expression
	7,  // 20: inf.survey.ItemComponent.items:type_name -> inf.survey.ItemComponent
	13, // 21: inf.survey.ItemComponent.order:type_name -> inf.expressions.Expression
	9,  // 22: inf.survey.ItemComponent.style:type_name -> inf.survey.ItemComponent.Style
	8,  // 23: inf.survey.ItemComponent.description:type_name -> inf.survey.LocalisedObject
	10, // 24: inf.survey.ItemComponent.properties:type_name -> inf.survey.ItemComponent.Properties
	12, // 25: inf.survey.LocalisedObject.parts:type_name -> inf.expressions.ExpressionArg
	12, // 26: inf.survey.ItemComponent.Properties.min:type_name -> inf.expressions.ExpressionArg
	12, // 27: inf.survey.ItemComponent.Properties.max:type_name -> inf.expressions.ExpressionArg
	12, // 28: inf.survey.ItemComponent.Properties.stepSize:type_name -> inf.expressions.ExpressionArg
	12, // 29: inf.survey.ItemComponent.Properties.dateInputMode:type_name -> inf.expressions.ExpressionArg
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_api_survey_proto_init() }
func file_api_survey_proto_init() {
	if File_api_survey_proto != nil {
		return
	}
	file_api_expression_proto_init()
	file_api_survey_response_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_survey_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyContextDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Survey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxItemsPerPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalisedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemComponent_Style); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_survey_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemComponent_Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_survey_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_survey_proto_goTypes,
		DependencyIndexes: file_api_survey_proto_depIdxs,
		MessageInfos:      file_api_survey_proto_msgTypes,
	}.Build()
	File_api_survey_proto = out.File
	file_api_survey_proto_rawDesc = nil
	file_api_survey_proto_goTypes = nil
	file_api_survey_proto_depIdxs = nil
}
