// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: api/study-service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ServiceStatus_StatusValue int32

const (
	ServiceStatus_NORMAL  ServiceStatus_StatusValue = 0
	ServiceStatus_PROBLEM ServiceStatus_StatusValue = 1
)

// Enum value maps for ServiceStatus_StatusValue.
var (
	ServiceStatus_StatusValue_name = map[int32]string{
		0: "NORMAL",
		1: "PROBLEM",
	}
	ServiceStatus_StatusValue_value = map[string]int32{
		"NORMAL":  0,
		"PROBLEM": 1,
	}
)

func (x ServiceStatus_StatusValue) Enum() *ServiceStatus_StatusValue {
	p := new(ServiceStatus_StatusValue)
	*p = x
	return p
}

func (x ServiceStatus_StatusValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus_StatusValue) Descriptor() protoreflect.EnumDescriptor {
	return file_api_study_service_proto_enumTypes[0].Descriptor()
}

func (ServiceStatus_StatusValue) Type() protoreflect.EnumType {
	return &file_api_study_service_proto_enumTypes[0]
}

func (x ServiceStatus_StatusValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus_StatusValue.Descriptor instead.
func (ServiceStatus_StatusValue) EnumDescriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{3, 0}
}

type SurveyResponseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string      `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyKey string      `protobuf:"bytes,3,opt,name=survey_key,json=surveyKey,proto3" json:"survey_key,omitempty"`
	From      int64       `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	Until     int64       `protobuf:"varint,5,opt,name=until,proto3" json:"until,omitempty"`
	// to query specific survey engine versions for example:
	ContextQuery map[string]string `protobuf:"bytes,6,rep,name=context_query,json=contextQuery,proto3" json:"context_query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SurveyResponseQuery) Reset() {
	*x = SurveyResponseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyResponseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyResponseQuery) ProtoMessage() {}

func (x *SurveyResponseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyResponseQuery.ProtoReflect.Descriptor instead.
func (*SurveyResponseQuery) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{0}
}

func (x *SurveyResponseQuery) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SurveyResponseQuery) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SurveyResponseQuery) GetSurveyKey() string {
	if x != nil {
		return x.SurveyKey
	}
	return ""
}

func (x *SurveyResponseQuery) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SurveyResponseQuery) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

func (x *SurveyResponseQuery) GetContextQuery() map[string]string {
	if x != nil {
		return x.ContextQuery
	}
	return nil
}

type StudyResponseStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyKey             string           `protobuf:"bytes,1,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyResponseCounts map[string]int64 `protobuf:"bytes,6,rep,name=survey_response_counts,json=surveyResponseCounts,proto3" json:"survey_response_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StudyResponseStatistics) Reset() {
	*x = StudyResponseStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyResponseStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyResponseStatistics) ProtoMessage() {}

func (x *StudyResponseStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyResponseStatistics.ProtoReflect.Descriptor instead.
func (*StudyResponseStatistics) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{1}
}

func (x *StudyResponseStatistics) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyResponseStatistics) GetSurveyResponseCounts() map[string]int64 {
	if x != nil {
		return x.SurveyResponseCounts
	}
	return nil
}

type ProfilesWithConditionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string   `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey   string   `protobuf:"bytes,2,opt,name=studyKey,proto3" json:"studyKey,omitempty"`
	ProfileIds []string `protobuf:"bytes,3,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
	// evaluate this expression for profiles if and until any of them fulfilles
	Condition *ExpressionArg `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *ProfilesWithConditionReq) Reset() {
	*x = ProfilesWithConditionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilesWithConditionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilesWithConditionReq) ProtoMessage() {}

func (x *ProfilesWithConditionReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilesWithConditionReq.ProtoReflect.Descriptor instead.
func (*ProfilesWithConditionReq) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{2}
}

func (x *ProfilesWithConditionReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ProfilesWithConditionReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *ProfilesWithConditionReq) GetProfileIds() []string {
	if x != nil {
		return x.ProfileIds
	}
	return nil
}

func (x *ProfilesWithConditionReq) GetCondition() *ExpressionArg {
	if x != nil {
		return x.Condition
	}
	return nil
}

type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ServiceStatus_StatusValue `protobuf:"varint,1,opt,name=status,proto3,enum=inf.study_service.ServiceStatus_StatusValue" json:"status,omitempty"`
	Msg     string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Version string                    `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceStatus) GetStatus() ServiceStatus_StatusValue {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_NORMAL
}

func (x *ServiceStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ServiceStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type NewStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Study *Study      `protobuf:"bytes,2,opt,name=study,proto3" json:"study,omitempty"`
}

func (x *NewStudyRequest) Reset() {
	*x = NewStudyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStudyRequest) ProtoMessage() {}

func (x *NewStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStudyRequest.ProtoReflect.Descriptor instead.
func (*NewStudyRequest) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{4}
}

func (x *NewStudyRequest) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *NewStudyRequest) GetStudy() *Study {
	if x != nil {
		return x.Study
	}
	return nil
}

type SurveyAndContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Survey  *Survey         `protobuf:"bytes,1,opt,name=survey,proto3" json:"survey,omitempty"`
	Context *SurveyContext  `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	Prefill *SurveyResponse `protobuf:"bytes,3,opt,name=prefill,proto3" json:"prefill,omitempty"`
}

func (x *SurveyAndContext) Reset() {
	*x = SurveyAndContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyAndContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyAndContext) ProtoMessage() {}

func (x *SurveyAndContext) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyAndContext.ProtoReflect.Descriptor instead.
func (*SurveyAndContext) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{5}
}

func (x *SurveyAndContext) GetSurvey() *Survey {
	if x != nil {
		return x.Survey
	}
	return nil
}

func (x *SurveyAndContext) GetContext() *SurveyContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *SurveyAndContext) GetPrefill() *SurveyResponse {
	if x != nil {
		return x.Prefill
	}
	return nil
}

type StudyReferenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string      `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
}

func (x *StudyReferenceReq) Reset() {
	*x = StudyReferenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyReferenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyReferenceReq) ProtoMessage() {}

func (x *StudyReferenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyReferenceReq.ProtoReflect.Descriptor instead.
func (*StudyReferenceReq) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{6}
}

func (x *StudyReferenceReq) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyReferenceReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

type SurveyInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SurveyInfoResp_SurveyInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SurveyInfoResp) Reset() {
	*x = SurveyInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyInfoResp) ProtoMessage() {}

func (x *SurveyInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyInfoResp.ProtoReflect.Descriptor instead.
func (*SurveyInfoResp) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{7}
}

func (x *SurveyInfoResp) GetInfos() []*SurveyInfoResp_SurveyInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type AddSurveyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string      `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Survey   *Survey     `protobuf:"bytes,3,opt,name=survey,proto3" json:"survey,omitempty"`
}

func (x *AddSurveyReq) Reset() {
	*x = AddSurveyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSurveyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSurveyReq) ProtoMessage() {}

func (x *AddSurveyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSurveyReq.ProtoReflect.Descriptor instead.
func (*AddSurveyReq) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{8}
}

func (x *AddSurveyReq) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *AddSurveyReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *AddSurveyReq) GetSurvey() *Survey {
	if x != nil {
		return x.Survey
	}
	return nil
}

type SubmitResponseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *TokenInfos     `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // identifies the user who is submitting
	StudyKey string          `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Response *SurveyResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SubmitResponseReq) Reset() {
	*x = SubmitResponseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitResponseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitResponseReq) ProtoMessage() {}

func (x *SubmitResponseReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitResponseReq.ProtoReflect.Descriptor instead.
func (*SubmitResponseReq) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitResponseReq) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SubmitResponseReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SubmitResponseReq) GetResponse() *SurveyResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type EnterStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string      `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
}

func (x *EnterStudyRequest) Reset() {
	*x = EnterStudyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterStudyRequest) ProtoMessage() {}

func (x *EnterStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterStudyRequest.ProtoReflect.Descriptor instead.
func (*EnterStudyRequest) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{10}
}

func (x *EnterStudyRequest) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *EnterStudyRequest) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

type LeaveStudyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string      `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
}

func (x *LeaveStudyMsg) Reset() {
	*x = LeaveStudyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveStudyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveStudyMsg) ProtoMessage() {}

func (x *LeaveStudyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveStudyMsg.ProtoReflect.Descriptor instead.
func (*LeaveStudyMsg) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{11}
}

func (x *LeaveStudyMsg) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LeaveStudyMsg) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

type SurveyReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string      `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyKey string      `protobuf:"bytes,3,opt,name=survey_key,json=surveyKey,proto3" json:"survey_key,omitempty"`
}

func (x *SurveyReferenceRequest) Reset() {
	*x = SurveyReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyReferenceRequest) ProtoMessage() {}

func (x *SurveyReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyReferenceRequest.ProtoReflect.Descriptor instead.
func (*SurveyReferenceRequest) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{12}
}

func (x *SurveyReferenceRequest) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SurveyReferenceRequest) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SurveyReferenceRequest) GetSurveyKey() string {
	if x != nil {
		return x.SurveyKey
	}
	return ""
}

type PostponeSurveyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string      `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyKey string      `protobuf:"bytes,3,opt,name=survey_key,json=surveyKey,proto3" json:"survey_key,omitempty"`
	Delay     int64       `protobuf:"varint,4,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *PostponeSurveyRequest) Reset() {
	*x = PostponeSurveyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostponeSurveyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostponeSurveyRequest) ProtoMessage() {}

func (x *PostponeSurveyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostponeSurveyRequest.ProtoReflect.Descriptor instead.
func (*PostponeSurveyRequest) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{13}
}

func (x *PostponeSurveyRequest) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *PostponeSurveyRequest) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *PostponeSurveyRequest) GetSurveyKey() string {
	if x != nil {
		return x.SurveyKey
	}
	return ""
}

func (x *PostponeSurveyRequest) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type StatusReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        *TokenInfos     `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StatusSurvey *SurveyResponse `protobuf:"bytes,2,opt,name=status_survey,json=statusSurvey,proto3" json:"status_survey,omitempty"`
}

func (x *StatusReportRequest) Reset() {
	*x = StatusReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReportRequest) ProtoMessage() {}

func (x *StatusReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReportRequest.ProtoReflect.Descriptor instead.
func (*StatusReportRequest) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{14}
}

func (x *StatusReportRequest) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StatusReportRequest) GetStatusSurvey() *SurveyResponse {
	if x != nil {
		return x.StatusSurvey
	}
	return nil
}

type GetStudiesForUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetStudiesForUserReq) Reset() {
	*x = GetStudiesForUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStudiesForUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudiesForUserReq) ProtoMessage() {}

func (x *GetStudiesForUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudiesForUserReq.ProtoReflect.Descriptor instead.
func (*GetStudiesForUserReq) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetStudiesForUserReq) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

type Studies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Studies []*Study `protobuf:"bytes,1,rep,name=studies,proto3" json:"studies,omitempty"`
}

func (x *Studies) Reset() {
	*x = Studies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Studies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Studies) ProtoMessage() {}

func (x *Studies) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Studies.ProtoReflect.Descriptor instead.
func (*Studies) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{16}
}

func (x *Studies) GetStudies() []*Study {
	if x != nil {
		return x.Studies
	}
	return nil
}

type StudyMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *TokenInfos   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string        `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Member   *Study_Member `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *StudyMemberReq) Reset() {
	*x = StudyMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyMemberReq) ProtoMessage() {}

func (x *StudyMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyMemberReq.ProtoReflect.Descriptor instead.
func (*StudyMemberReq) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{17}
}

func (x *StudyMemberReq) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyMemberReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyMemberReq) GetMember() *Study_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type StudyRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *TokenInfos   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string        `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Rules    []*Expression `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *StudyRulesReq) Reset() {
	*x = StudyRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyRulesReq) ProtoMessage() {}

func (x *StudyRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyRulesReq.ProtoReflect.Descriptor instead.
func (*StudyRulesReq) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{18}
}

func (x *StudyRulesReq) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyRulesReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyRulesReq) GetRules() []*Expression {
	if x != nil {
		return x.Rules
	}
	return nil
}

type StudyStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string      `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	NewStatus string      `protobuf:"bytes,3,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (x *StudyStatusReq) Reset() {
	*x = StudyStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyStatusReq) ProtoMessage() {}

func (x *StudyStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyStatusReq.ProtoReflect.Descriptor instead.
func (*StudyStatusReq) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{19}
}

func (x *StudyStatusReq) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyStatusReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyStatusReq) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

type StudyPropsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *TokenInfos  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string       `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Props    *Study_Props `protobuf:"bytes,3,opt,name=props,proto3" json:"props,omitempty"`
}

func (x *StudyPropsReq) Reset() {
	*x = StudyPropsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyPropsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyPropsReq) ProtoMessage() {}

func (x *StudyPropsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyPropsReq.ProtoReflect.Descriptor instead.
func (*StudyPropsReq) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{20}
}

func (x *StudyPropsReq) GetToken() *TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyPropsReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyPropsReq) GetProps() *Study_Props {
	if x != nil {
		return x.Props
	}
	return nil
}

type SurveyInfoResp_SurveyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name        []*LocalisedObject `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty"`
	Description []*LocalisedObject `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty"`
}

func (x *SurveyInfoResp_SurveyInfo) Reset() {
	*x = SurveyInfoResp_SurveyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_study_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyInfoResp_SurveyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyInfoResp_SurveyInfo) ProtoMessage() {}

func (x *SurveyInfoResp_SurveyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_study_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyInfoResp_SurveyInfo.ProtoReflect.Descriptor instead.
func (*SurveyInfoResp_SurveyInfo) Descriptor() ([]byte, []int) {
	return file_api_study_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SurveyInfoResp_SurveyInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SurveyInfoResp_SurveyInfo) GetName() []*LocalisedObject {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SurveyInfoResp_SurveyInfo) GetDescription() []*LocalisedObject {
	if x != nil {
		return x.Description
	}
	return nil
}

var File_api_study_service_proto protoreflect.FileDescriptor

var file_api_study_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x69, 0x6e, 0x66, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0e, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x02,
	0x0a, 0x13, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x5d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x7a, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x47, 0x0a, 0x19,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9,
	0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x01, 0x22, 0x65, 0x0a, 0x0f, 0x4e, 0x65,
	0x77, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x05, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x06, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x22, 0x5c, 0x0a, 0x11, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x4b, 0x65, 0x79, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x0a,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x06, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5c, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79,
	0x22, 0x58, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x73,
	0x67, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x95, 0x01,
	0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x22, 0x42, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x35, 0x0a, 0x07, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x0e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x0d,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x0e, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x32, 0x83, 0x11, 0x0a,
	0x0f, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x69,
	0x12, 0x42, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x14, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x63, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x56, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x26, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65,
	0x73, 0x12, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x66,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x71, 0x0a, 0x20, 0x48, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x69,
	0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x41,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12,
	0x14, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x24, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x48, 0x0a,
	0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x46, 0x0a,
	0x0f, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x69, 0x6e, 0x66, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x53,
	0x61, 0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x54, 0x6f, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x44, 0x65, 0x66, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x29, 0x2e,
	0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x64, 0x0a, 0x15,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x70, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x23, 0x2e, 0x69, 0x6e,
	0x66, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_study_service_proto_rawDescOnce sync.Once
	file_api_study_service_proto_rawDescData = file_api_study_service_proto_rawDesc
)

func file_api_study_service_proto_rawDescGZIP() []byte {
	file_api_study_service_proto_rawDescOnce.Do(func() {
		file_api_study_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_study_service_proto_rawDescData)
	})
	return file_api_study_service_proto_rawDescData
}

var file_api_study_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_study_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_api_study_service_proto_goTypes = []interface{}{
	(ServiceStatus_StatusValue)(0),    // 0: inf.study_service.ServiceStatus.StatusValue
	(*SurveyResponseQuery)(nil),       // 1: inf.study_service.SurveyResponseQuery
	(*StudyResponseStatistics)(nil),   // 2: inf.study_service.StudyResponseStatistics
	(*ProfilesWithConditionReq)(nil),  // 3: inf.study_service.ProfilesWithConditionReq
	(*ServiceStatus)(nil),             // 4: inf.study_service.ServiceStatus
	(*NewStudyRequest)(nil),           // 5: inf.study_service.NewStudyRequest
	(*SurveyAndContext)(nil),          // 6: inf.study_service.SurveyAndContext
	(*StudyReferenceReq)(nil),         // 7: inf.study_service.StudyReferenceReq
	(*SurveyInfoResp)(nil),            // 8: inf.study_service.SurveyInfoResp
	(*AddSurveyReq)(nil),              // 9: inf.study_service.AddSurveyReq
	(*SubmitResponseReq)(nil),         // 10: inf.study_service.SubmitResponseReq
	(*EnterStudyRequest)(nil),         // 11: inf.study_service.EnterStudyRequest
	(*LeaveStudyMsg)(nil),             // 12: inf.study_service.LeaveStudyMsg
	(*SurveyReferenceRequest)(nil),    // 13: inf.study_service.SurveyReferenceRequest
	(*PostponeSurveyRequest)(nil),     // 14: inf.study_service.PostponeSurveyRequest
	(*StatusReportRequest)(nil),       // 15: inf.study_service.StatusReportRequest
	(*GetStudiesForUserReq)(nil),      // 16: inf.study_service.GetStudiesForUserReq
	(*Studies)(nil),                   // 17: inf.study_service.Studies
	(*StudyMemberReq)(nil),            // 18: inf.study_service.StudyMemberReq
	(*StudyRulesReq)(nil),             // 19: inf.study_service.StudyRulesReq
	(*StudyStatusReq)(nil),            // 20: inf.study_service.StudyStatusReq
	(*StudyPropsReq)(nil),             // 21: inf.study_service.StudyPropsReq
	nil,                               // 22: inf.study_service.SurveyResponseQuery.ContextQueryEntry
	nil,                               // 23: inf.study_service.StudyResponseStatistics.SurveyResponseCountsEntry
	(*SurveyInfoResp_SurveyInfo)(nil), // 24: inf.study_service.SurveyInfoResp.SurveyInfo
	(*TokenInfos)(nil),                // 25: inf.auth.TokenInfos
	(*ExpressionArg)(nil),             // 26: inf.expressions.ExpressionArg
	(*Study)(nil),                     // 27: inf.study.Study
	(*Survey)(nil),                    // 28: inf.survey.Survey
	(*SurveyContext)(nil),             // 29: inf.survey.SurveyContext
	(*SurveyResponse)(nil),            // 30: inf.survey_response.SurveyResponse
	(*Study_Member)(nil),              // 31: inf.study.Study.Member
	(*Expression)(nil),                // 32: inf.expressions.Expression
	(*Study_Props)(nil),               // 33: inf.study.Study.Props
	(*LocalisedObject)(nil),           // 34: inf.survey.LocalisedObject
	(*empty.Empty)(nil),               // 35: google.protobuf.Empty
	(*AssignedSurveys)(nil),           // 36: inf.study.AssignedSurveys
}
var file_api_study_service_proto_depIdxs = []int32{
	25, // 0: inf.study_service.SurveyResponseQuery.token:type_name -> inf.auth.TokenInfos
	22, // 1: inf.study_service.SurveyResponseQuery.context_query:type_name -> inf.study_service.SurveyResponseQuery.ContextQueryEntry
	23, // 2: inf.study_service.StudyResponseStatistics.survey_response_counts:type_name -> inf.study_service.StudyResponseStatistics.SurveyResponseCountsEntry
	26, // 3: inf.study_service.ProfilesWithConditionReq.condition:type_name -> inf.expressions.ExpressionArg
	0,  // 4: inf.study_service.ServiceStatus.status:type_name -> inf.study_service.ServiceStatus.StatusValue
	25, // 5: inf.study_service.NewStudyRequest.token:type_name -> inf.auth.TokenInfos
	27, // 6: inf.study_service.NewStudyRequest.study:type_name -> inf.study.Study
	28, // 7: inf.study_service.SurveyAndContext.survey:type_name -> inf.survey.Survey
	29, // 8: inf.study_service.SurveyAndContext.context:type_name -> inf.survey.SurveyContext
	30, // 9: inf.study_service.SurveyAndContext.prefill:type_name -> inf.survey_response.SurveyResponse
	25, // 10: inf.study_service.StudyReferenceReq.token:type_name -> inf.auth.TokenInfos
	24, // 11: inf.study_service.SurveyInfoResp.infos:type_name -> inf.study_service.SurveyInfoResp.SurveyInfo
	25, // 12: inf.study_service.AddSurveyReq.token:type_name -> inf.auth.TokenInfos
	28, // 13: inf.study_service.AddSurveyReq.survey:type_name -> inf.survey.Survey
	25, // 14: inf.study_service.SubmitResponseReq.token:type_name -> inf.auth.TokenInfos
	30, // 15: inf.study_service.SubmitResponseReq.response:type_name -> inf.survey_response.SurveyResponse
	25, // 16: inf.study_service.EnterStudyRequest.token:type_name -> inf.auth.TokenInfos
	25, // 17: inf.study_service.LeaveStudyMsg.token:type_name -> inf.auth.TokenInfos
	25, // 18: inf.study_service.SurveyReferenceRequest.token:type_name -> inf.auth.TokenInfos
	25, // 19: inf.study_service.PostponeSurveyRequest.token:type_name -> inf.auth.TokenInfos
	25, // 20: inf.study_service.StatusReportRequest.token:type_name -> inf.auth.TokenInfos
	30, // 21: inf.study_service.StatusReportRequest.status_survey:type_name -> inf.survey_response.SurveyResponse
	25, // 22: inf.study_service.GetStudiesForUserReq.token:type_name -> inf.auth.TokenInfos
	27, // 23: inf.study_service.Studies.studies:type_name -> inf.study.Study
	25, // 24: inf.study_service.StudyMemberReq.token:type_name -> inf.auth.TokenInfos
	31, // 25: inf.study_service.StudyMemberReq.member:type_name -> inf.study.Study.Member
	25, // 26: inf.study_service.StudyRulesReq.token:type_name -> inf.auth.TokenInfos
	32, // 27: inf.study_service.StudyRulesReq.rules:type_name -> inf.expressions.Expression
	25, // 28: inf.study_service.StudyStatusReq.token:type_name -> inf.auth.TokenInfos
	25, // 29: inf.study_service.StudyPropsReq.token:type_name -> inf.auth.TokenInfos
	33, // 30: inf.study_service.StudyPropsReq.props:type_name -> inf.study.Study.Props
	34, // 31: inf.study_service.SurveyInfoResp.SurveyInfo.name:type_name -> inf.survey.LocalisedObject
	34, // 32: inf.study_service.SurveyInfoResp.SurveyInfo.description:type_name -> inf.survey.LocalisedObject
	35, // 33: inf.study_service.StudyServiceApi.Status:input_type -> google.protobuf.Empty
	11, // 34: inf.study_service.StudyServiceApi.EnterStudy:input_type -> inf.study_service.EnterStudyRequest
	25, // 35: inf.study_service.StudyServiceApi.GetAssignedSurveys:input_type -> inf.auth.TokenInfos
	13, // 36: inf.study_service.StudyServiceApi.GetAssignedSurvey:input_type -> inf.study_service.SurveyReferenceRequest
	14, // 37: inf.study_service.StudyServiceApi.PostponeSurvey:input_type -> inf.study_service.PostponeSurveyRequest
	15, // 38: inf.study_service.StudyServiceApi.SubmitStatusReport:input_type -> inf.study_service.StatusReportRequest
	10, // 39: inf.study_service.StudyServiceApi.SubmitResponse:input_type -> inf.study_service.SubmitResponseReq
	12, // 40: inf.study_service.StudyServiceApi.LeaveStudy:input_type -> inf.study_service.LeaveStudyMsg
	16, // 41: inf.study_service.StudyServiceApi.GetStudiesForUser:input_type -> inf.study_service.GetStudiesForUserReq
	25, // 42: inf.study_service.StudyServiceApi.GetActiveStudies:input_type -> inf.auth.TokenInfos
	7,  // 43: inf.study_service.StudyServiceApi.GetStudySurveyInfos:input_type -> inf.study_service.StudyReferenceReq
	3,  // 44: inf.study_service.StudyServiceApi.HasParticipantStateWithCondition:input_type -> inf.study_service.ProfilesWithConditionReq
	5,  // 45: inf.study_service.StudyServiceApi.CreateNewStudy:input_type -> inf.study_service.NewStudyRequest
	25, // 46: inf.study_service.StudyServiceApi.GetAllStudies:input_type -> inf.auth.TokenInfos
	7,  // 47: inf.study_service.StudyServiceApi.GetStudy:input_type -> inf.study_service.StudyReferenceReq
	18, // 48: inf.study_service.StudyServiceApi.SaveStudyMember:input_type -> inf.study_service.StudyMemberReq
	18, // 49: inf.study_service.StudyServiceApi.RemoveStudyMember:input_type -> inf.study_service.StudyMemberReq
	19, // 50: inf.study_service.StudyServiceApi.SaveStudyRules:input_type -> inf.study_service.StudyRulesReq
	20, // 51: inf.study_service.StudyServiceApi.SaveStudyStatus:input_type -> inf.study_service.StudyStatusReq
	21, // 52: inf.study_service.StudyServiceApi.SaveStudyProps:input_type -> inf.study_service.StudyPropsReq
	9,  // 53: inf.study_service.StudyServiceApi.SaveSurveyToStudy:input_type -> inf.study_service.AddSurveyReq
	13, // 54: inf.study_service.StudyServiceApi.GetSurveyDefForStudy:input_type -> inf.study_service.SurveyReferenceRequest
	13, // 55: inf.study_service.StudyServiceApi.RemoveSurveyFromStudy:input_type -> inf.study_service.SurveyReferenceRequest
	7,  // 56: inf.study_service.StudyServiceApi.DeleteStudy:input_type -> inf.study_service.StudyReferenceReq
	1,  // 57: inf.study_service.StudyServiceApi.GetStudyResponseStatistics:input_type -> inf.study_service.SurveyResponseQuery
	1,  // 58: inf.study_service.StudyServiceApi.StreamStudyResponses:input_type -> inf.study_service.SurveyResponseQuery
	4,  // 59: inf.study_service.StudyServiceApi.Status:output_type -> inf.study_service.ServiceStatus
	36, // 60: inf.study_service.StudyServiceApi.EnterStudy:output_type -> inf.study.AssignedSurveys
	36, // 61: inf.study_service.StudyServiceApi.GetAssignedSurveys:output_type -> inf.study.AssignedSurveys
	6,  // 62: inf.study_service.StudyServiceApi.GetAssignedSurvey:output_type -> inf.study_service.SurveyAndContext
	36, // 63: inf.study_service.StudyServiceApi.PostponeSurvey:output_type -> inf.study.AssignedSurveys
	36, // 64: inf.study_service.StudyServiceApi.SubmitStatusReport:output_type -> inf.study.AssignedSurveys
	36, // 65: inf.study_service.StudyServiceApi.SubmitResponse:output_type -> inf.study.AssignedSurveys
	36, // 66: inf.study_service.StudyServiceApi.LeaveStudy:output_type -> inf.study.AssignedSurveys
	17, // 67: inf.study_service.StudyServiceApi.GetStudiesForUser:output_type -> inf.study_service.Studies
	17, // 68: inf.study_service.StudyServiceApi.GetActiveStudies:output_type -> inf.study_service.Studies
	8,  // 69: inf.study_service.StudyServiceApi.GetStudySurveyInfos:output_type -> inf.study_service.SurveyInfoResp
	4,  // 70: inf.study_service.StudyServiceApi.HasParticipantStateWithCondition:output_type -> inf.study_service.ServiceStatus
	27, // 71: inf.study_service.StudyServiceApi.CreateNewStudy:output_type -> inf.study.Study
	17, // 72: inf.study_service.StudyServiceApi.GetAllStudies:output_type -> inf.study_service.Studies
	27, // 73: inf.study_service.StudyServiceApi.GetStudy:output_type -> inf.study.Study
	27, // 74: inf.study_service.StudyServiceApi.SaveStudyMember:output_type -> inf.study.Study
	27, // 75: inf.study_service.StudyServiceApi.RemoveStudyMember:output_type -> inf.study.Study
	27, // 76: inf.study_service.StudyServiceApi.SaveStudyRules:output_type -> inf.study.Study
	27, // 77: inf.study_service.StudyServiceApi.SaveStudyStatus:output_type -> inf.study.Study
	27, // 78: inf.study_service.StudyServiceApi.SaveStudyProps:output_type -> inf.study.Study
	28, // 79: inf.study_service.StudyServiceApi.SaveSurveyToStudy:output_type -> inf.survey.Survey
	28, // 80: inf.study_service.StudyServiceApi.GetSurveyDefForStudy:output_type -> inf.survey.Survey
	4,  // 81: inf.study_service.StudyServiceApi.RemoveSurveyFromStudy:output_type -> inf.study_service.ServiceStatus
	4,  // 82: inf.study_service.StudyServiceApi.DeleteStudy:output_type -> inf.study_service.ServiceStatus
	2,  // 83: inf.study_service.StudyServiceApi.GetStudyResponseStatistics:output_type -> inf.study_service.StudyResponseStatistics
	30, // 84: inf.study_service.StudyServiceApi.StreamStudyResponses:output_type -> inf.survey_response.SurveyResponse
	59, // [59:85] is the sub-list for method output_type
	33, // [33:59] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_api_study_service_proto_init() }
func file_api_study_service_proto_init() {
	if File_api_study_service_proto != nil {
		return
	}
	file_api_auth_proto_init()
	file_api_study_proto_init()
	file_api_survey_proto_init()
	file_api_expression_proto_init()
	file_api_survey_response_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_study_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyResponseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyResponseStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilesWithConditionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStudyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyAndContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyReferenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSurveyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitResponseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterStudyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveStudyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostponeSurveyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStudiesForUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Studies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyPropsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_study_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyInfoResp_SurveyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_study_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_study_service_proto_goTypes,
		DependencyIndexes: file_api_study_service_proto_depIdxs,
		EnumInfos:         file_api_study_service_proto_enumTypes,
		MessageInfos:      file_api_study_service_proto_msgTypes,
	}.Build()
	File_api_study_service_proto = out.File
	file_api_study_service_proto_rawDesc = nil
	file_api_study_service_proto_goTypes = nil
	file_api_study_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StudyServiceApiClient is the client API for StudyServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudyServiceApiClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServiceStatus, error)
	// Study flow
	EnterStudy(ctx context.Context, in *EnterStudyRequest, opts ...grpc.CallOption) (*AssignedSurveys, error)
	GetAssignedSurveys(ctx context.Context, in *TokenInfos, opts ...grpc.CallOption) (*AssignedSurveys, error)
	GetAssignedSurvey(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*SurveyAndContext, error)
	PostponeSurvey(ctx context.Context, in *PostponeSurveyRequest, opts ...grpc.CallOption) (*AssignedSurveys, error)
	SubmitStatusReport(ctx context.Context, in *StatusReportRequest, opts ...grpc.CallOption) (*AssignedSurveys, error)
	SubmitResponse(ctx context.Context, in *SubmitResponseReq, opts ...grpc.CallOption) (*AssignedSurveys, error)
	LeaveStudy(ctx context.Context, in *LeaveStudyMsg, opts ...grpc.CallOption) (*AssignedSurveys, error)
	// for all profiles (also not active studies):
	GetStudiesForUser(ctx context.Context, in *GetStudiesForUserReq, opts ...grpc.CallOption) (*Studies, error)
	// all active studies even if user not in:
	GetActiveStudies(ctx context.Context, in *TokenInfos, opts ...grpc.CallOption) (*Studies, error)
	// get info about surveys in a study:
	GetStudySurveyInfos(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*SurveyInfoResp, error)
	// any user profile is in the study and one state matches condition:
	HasParticipantStateWithCondition(ctx context.Context, in *ProfilesWithConditionReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	// ---> Study management
	CreateNewStudy(ctx context.Context, in *NewStudyRequest, opts ...grpc.CallOption) (*Study, error)
	GetAllStudies(ctx context.Context, in *TokenInfos, opts ...grpc.CallOption) (*Studies, error)
	GetStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*Study, error)
	// add, update and remove study members (and roles):
	SaveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error)
	RemoveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error)
	SaveStudyRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*Study, error)
	SaveStudyStatus(ctx context.Context, in *StudyStatusReq, opts ...grpc.CallOption) (*Study, error)
	SaveStudyProps(ctx context.Context, in *StudyPropsReq, opts ...grpc.CallOption) (*Study, error)
	SaveSurveyToStudy(ctx context.Context, in *AddSurveyReq, opts ...grpc.CallOption) (*Survey, error)
	GetSurveyDefForStudy(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*Survey, error)
	RemoveSurveyFromStudy(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*ServiceStatus, error)
	DeleteStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	GetStudyResponseStatistics(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (*StudyResponseStatistics, error)
	StreamStudyResponses(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamStudyResponsesClient, error)
}

type studyServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyServiceApiClient(cc grpc.ClientConnInterface) StudyServiceApiClient {
	return &studyServiceApiClient{cc}
}

func (c *studyServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) EnterStudy(ctx context.Context, in *EnterStudyRequest, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/EnterStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAssignedSurveys(ctx context.Context, in *TokenInfos, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/GetAssignedSurveys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAssignedSurvey(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*SurveyAndContext, error) {
	out := new(SurveyAndContext)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/GetAssignedSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) PostponeSurvey(ctx context.Context, in *PostponeSurveyRequest, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/PostponeSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SubmitStatusReport(ctx context.Context, in *StatusReportRequest, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/SubmitStatusReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SubmitResponse(ctx context.Context, in *SubmitResponseReq, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/SubmitResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) LeaveStudy(ctx context.Context, in *LeaveStudyMsg, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/LeaveStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudiesForUser(ctx context.Context, in *GetStudiesForUserReq, opts ...grpc.CallOption) (*Studies, error) {
	out := new(Studies)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/GetStudiesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetActiveStudies(ctx context.Context, in *TokenInfos, opts ...grpc.CallOption) (*Studies, error) {
	out := new(Studies)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/GetActiveStudies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudySurveyInfos(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*SurveyInfoResp, error) {
	out := new(SurveyInfoResp)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/GetStudySurveyInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) HasParticipantStateWithCondition(ctx context.Context, in *ProfilesWithConditionReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/HasParticipantStateWithCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) CreateNewStudy(ctx context.Context, in *NewStudyRequest, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/CreateNewStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAllStudies(ctx context.Context, in *TokenInfos, opts ...grpc.CallOption) (*Studies, error) {
	out := new(Studies)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/GetAllStudies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/GetStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/SaveStudyMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RemoveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/RemoveStudyMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/SaveStudyRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyStatus(ctx context.Context, in *StudyStatusReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/SaveStudyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyProps(ctx context.Context, in *StudyPropsReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/SaveStudyProps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveSurveyToStudy(ctx context.Context, in *AddSurveyReq, opts ...grpc.CallOption) (*Survey, error) {
	out := new(Survey)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/SaveSurveyToStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetSurveyDefForStudy(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*Survey, error) {
	out := new(Survey)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/GetSurveyDefForStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RemoveSurveyFromStudy(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/RemoveSurveyFromStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) DeleteStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/DeleteStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudyResponseStatistics(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (*StudyResponseStatistics, error) {
	out := new(StudyResponseStatistics)
	err := c.cc.Invoke(ctx, "/inf.study_service.StudyServiceApi/GetStudyResponseStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) StreamStudyResponses(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamStudyResponsesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudyServiceApi_serviceDesc.Streams[0], "/inf.study_service.StudyServiceApi/StreamStudyResponses", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiStreamStudyResponsesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_StreamStudyResponsesClient interface {
	Recv() (*SurveyResponse, error)
	grpc.ClientStream
}

type studyServiceApiStreamStudyResponsesClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiStreamStudyResponsesClient) Recv() (*SurveyResponse, error) {
	m := new(SurveyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudyServiceApiServer is the server API for StudyServiceApi service.
type StudyServiceApiServer interface {
	Status(context.Context, *empty.Empty) (*ServiceStatus, error)
	// Study flow
	EnterStudy(context.Context, *EnterStudyRequest) (*AssignedSurveys, error)
	GetAssignedSurveys(context.Context, *TokenInfos) (*AssignedSurveys, error)
	GetAssignedSurvey(context.Context, *SurveyReferenceRequest) (*SurveyAndContext, error)
	PostponeSurvey(context.Context, *PostponeSurveyRequest) (*AssignedSurveys, error)
	SubmitStatusReport(context.Context, *StatusReportRequest) (*AssignedSurveys, error)
	SubmitResponse(context.Context, *SubmitResponseReq) (*AssignedSurveys, error)
	LeaveStudy(context.Context, *LeaveStudyMsg) (*AssignedSurveys, error)
	// for all profiles (also not active studies):
	GetStudiesForUser(context.Context, *GetStudiesForUserReq) (*Studies, error)
	// all active studies even if user not in:
	GetActiveStudies(context.Context, *TokenInfos) (*Studies, error)
	// get info about surveys in a study:
	GetStudySurveyInfos(context.Context, *StudyReferenceReq) (*SurveyInfoResp, error)
	// any user profile is in the study and one state matches condition:
	HasParticipantStateWithCondition(context.Context, *ProfilesWithConditionReq) (*ServiceStatus, error)
	// ---> Study management
	CreateNewStudy(context.Context, *NewStudyRequest) (*Study, error)
	GetAllStudies(context.Context, *TokenInfos) (*Studies, error)
	GetStudy(context.Context, *StudyReferenceReq) (*Study, error)
	// add, update and remove study members (and roles):
	SaveStudyMember(context.Context, *StudyMemberReq) (*Study, error)
	RemoveStudyMember(context.Context, *StudyMemberReq) (*Study, error)
	SaveStudyRules(context.Context, *StudyRulesReq) (*Study, error)
	SaveStudyStatus(context.Context, *StudyStatusReq) (*Study, error)
	SaveStudyProps(context.Context, *StudyPropsReq) (*Study, error)
	SaveSurveyToStudy(context.Context, *AddSurveyReq) (*Survey, error)
	GetSurveyDefForStudy(context.Context, *SurveyReferenceRequest) (*Survey, error)
	RemoveSurveyFromStudy(context.Context, *SurveyReferenceRequest) (*ServiceStatus, error)
	DeleteStudy(context.Context, *StudyReferenceReq) (*ServiceStatus, error)
	GetStudyResponseStatistics(context.Context, *SurveyResponseQuery) (*StudyResponseStatistics, error)
	StreamStudyResponses(*SurveyResponseQuery, StudyServiceApi_StreamStudyResponsesServer) error
}

// UnimplementedStudyServiceApiServer can be embedded to have forward compatible implementations.
type UnimplementedStudyServiceApiServer struct {
}

func (*UnimplementedStudyServiceApiServer) Status(context.Context, *empty.Empty) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedStudyServiceApiServer) EnterStudy(context.Context, *EnterStudyRequest) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetAssignedSurveys(context.Context, *TokenInfos) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedSurveys not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetAssignedSurvey(context.Context, *SurveyReferenceRequest) (*SurveyAndContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedSurvey not implemented")
}
func (*UnimplementedStudyServiceApiServer) PostponeSurvey(context.Context, *PostponeSurveyRequest) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostponeSurvey not implemented")
}
func (*UnimplementedStudyServiceApiServer) SubmitStatusReport(context.Context, *StatusReportRequest) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitStatusReport not implemented")
}
func (*UnimplementedStudyServiceApiServer) SubmitResponse(context.Context, *SubmitResponseReq) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitResponse not implemented")
}
func (*UnimplementedStudyServiceApiServer) LeaveStudy(context.Context, *LeaveStudyMsg) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetStudiesForUser(context.Context, *GetStudiesForUserReq) (*Studies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudiesForUser not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetActiveStudies(context.Context, *TokenInfos) (*Studies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveStudies not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetStudySurveyInfos(context.Context, *StudyReferenceReq) (*SurveyInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudySurveyInfos not implemented")
}
func (*UnimplementedStudyServiceApiServer) HasParticipantStateWithCondition(context.Context, *ProfilesWithConditionReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasParticipantStateWithCondition not implemented")
}
func (*UnimplementedStudyServiceApiServer) CreateNewStudy(context.Context, *NewStudyRequest) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetAllStudies(context.Context, *TokenInfos) (*Studies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudies not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetStudy(context.Context, *StudyReferenceReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveStudyMember(context.Context, *StudyMemberReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyMember not implemented")
}
func (*UnimplementedStudyServiceApiServer) RemoveStudyMember(context.Context, *StudyMemberReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStudyMember not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveStudyRules(context.Context, *StudyRulesReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyRules not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveStudyStatus(context.Context, *StudyStatusReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyStatus not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveStudyProps(context.Context, *StudyPropsReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyProps not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveSurveyToStudy(context.Context, *AddSurveyReq) (*Survey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSurveyToStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetSurveyDefForStudy(context.Context, *SurveyReferenceRequest) (*Survey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyDefForStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) RemoveSurveyFromStudy(context.Context, *SurveyReferenceRequest) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSurveyFromStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) DeleteStudy(context.Context, *StudyReferenceReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetStudyResponseStatistics(context.Context, *SurveyResponseQuery) (*StudyResponseStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyResponseStatistics not implemented")
}
func (*UnimplementedStudyServiceApiServer) StreamStudyResponses(*SurveyResponseQuery, StudyServiceApi_StreamStudyResponsesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStudyResponses not implemented")
}

func RegisterStudyServiceApiServer(s *grpc.Server, srv StudyServiceApiServer) {
	s.RegisterService(&_StudyServiceApi_serviceDesc, srv)
}

func _StudyServiceApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_EnterStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).EnterStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/EnterStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).EnterStudy(ctx, req.(*EnterStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAssignedSurveys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAssignedSurveys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/GetAssignedSurveys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAssignedSurveys(ctx, req.(*TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAssignedSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAssignedSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/GetAssignedSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAssignedSurvey(ctx, req.(*SurveyReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_PostponeSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostponeSurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).PostponeSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/PostponeSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).PostponeSurvey(ctx, req.(*PostponeSurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SubmitStatusReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SubmitStatusReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/SubmitStatusReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SubmitStatusReport(ctx, req.(*StatusReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SubmitResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SubmitResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/SubmitResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SubmitResponse(ctx, req.(*SubmitResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_LeaveStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveStudyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).LeaveStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/LeaveStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).LeaveStudy(ctx, req.(*LeaveStudyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudiesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudiesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudiesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/GetStudiesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudiesForUser(ctx, req.(*GetStudiesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetActiveStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetActiveStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/GetActiveStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetActiveStudies(ctx, req.(*TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudySurveyInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudySurveyInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/GetStudySurveyInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudySurveyInfos(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_HasParticipantStateWithCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfilesWithConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).HasParticipantStateWithCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/HasParticipantStateWithCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).HasParticipantStateWithCondition(ctx, req.(*ProfilesWithConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_CreateNewStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).CreateNewStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/CreateNewStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).CreateNewStudy(ctx, req.(*NewStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAllStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAllStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/GetAllStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAllStudies(ctx, req.(*TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/GetStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudy(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/SaveStudyMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyMember(ctx, req.(*StudyMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RemoveStudyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RemoveStudyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/RemoveStudyMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RemoveStudyMember(ctx, req.(*StudyMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/SaveStudyRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyRules(ctx, req.(*StudyRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/SaveStudyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyStatus(ctx, req.(*StudyStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyPropsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/SaveStudyProps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyProps(ctx, req.(*StudyPropsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveSurveyToStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSurveyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveSurveyToStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/SaveSurveyToStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveSurveyToStudy(ctx, req.(*AddSurveyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetSurveyDefForStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetSurveyDefForStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/GetSurveyDefForStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetSurveyDefForStudy(ctx, req.(*SurveyReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RemoveSurveyFromStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RemoveSurveyFromStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/RemoveSurveyFromStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RemoveSurveyFromStudy(ctx, req.(*SurveyReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_DeleteStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).DeleteStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/DeleteStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).DeleteStudy(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudyResponseStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyResponseQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudyResponseStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inf.study_service.StudyServiceApi/GetStudyResponseStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudyResponseStatistics(ctx, req.(*SurveyResponseQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_StreamStudyResponses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SurveyResponseQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).StreamStudyResponses(m, &studyServiceApiStreamStudyResponsesServer{stream})
}

type StudyServiceApi_StreamStudyResponsesServer interface {
	Send(*SurveyResponse) error
	grpc.ServerStream
}

type studyServiceApiStreamStudyResponsesServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiStreamStudyResponsesServer) Send(m *SurveyResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _StudyServiceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inf.study_service.StudyServiceApi",
	HandlerType: (*StudyServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _StudyServiceApi_Status_Handler,
		},
		{
			MethodName: "EnterStudy",
			Handler:    _StudyServiceApi_EnterStudy_Handler,
		},
		{
			MethodName: "GetAssignedSurveys",
			Handler:    _StudyServiceApi_GetAssignedSurveys_Handler,
		},
		{
			MethodName: "GetAssignedSurvey",
			Handler:    _StudyServiceApi_GetAssignedSurvey_Handler,
		},
		{
			MethodName: "PostponeSurvey",
			Handler:    _StudyServiceApi_PostponeSurvey_Handler,
		},
		{
			MethodName: "SubmitStatusReport",
			Handler:    _StudyServiceApi_SubmitStatusReport_Handler,
		},
		{
			MethodName: "SubmitResponse",
			Handler:    _StudyServiceApi_SubmitResponse_Handler,
		},
		{
			MethodName: "LeaveStudy",
			Handler:    _StudyServiceApi_LeaveStudy_Handler,
		},
		{
			MethodName: "GetStudiesForUser",
			Handler:    _StudyServiceApi_GetStudiesForUser_Handler,
		},
		{
			MethodName: "GetActiveStudies",
			Handler:    _StudyServiceApi_GetActiveStudies_Handler,
		},
		{
			MethodName: "GetStudySurveyInfos",
			Handler:    _StudyServiceApi_GetStudySurveyInfos_Handler,
		},
		{
			MethodName: "HasParticipantStateWithCondition",
			Handler:    _StudyServiceApi_HasParticipantStateWithCondition_Handler,
		},
		{
			MethodName: "CreateNewStudy",
			Handler:    _StudyServiceApi_CreateNewStudy_Handler,
		},
		{
			MethodName: "GetAllStudies",
			Handler:    _StudyServiceApi_GetAllStudies_Handler,
		},
		{
			MethodName: "GetStudy",
			Handler:    _StudyServiceApi_GetStudy_Handler,
		},
		{
			MethodName: "SaveStudyMember",
			Handler:    _StudyServiceApi_SaveStudyMember_Handler,
		},
		{
			MethodName: "RemoveStudyMember",
			Handler:    _StudyServiceApi_RemoveStudyMember_Handler,
		},
		{
			MethodName: "SaveStudyRules",
			Handler:    _StudyServiceApi_SaveStudyRules_Handler,
		},
		{
			MethodName: "SaveStudyStatus",
			Handler:    _StudyServiceApi_SaveStudyStatus_Handler,
		},
		{
			MethodName: "SaveStudyProps",
			Handler:    _StudyServiceApi_SaveStudyProps_Handler,
		},
		{
			MethodName: "SaveSurveyToStudy",
			Handler:    _StudyServiceApi_SaveSurveyToStudy_Handler,
		},
		{
			MethodName: "GetSurveyDefForStudy",
			Handler:    _StudyServiceApi_GetSurveyDefForStudy_Handler,
		},
		{
			MethodName: "RemoveSurveyFromStudy",
			Handler:    _StudyServiceApi_RemoveSurveyFromStudy_Handler,
		},
		{
			MethodName: "DeleteStudy",
			Handler:    _StudyServiceApi_DeleteStudy_Handler,
		},
		{
			MethodName: "GetStudyResponseStatistics",
			Handler:    _StudyServiceApi_GetStudyResponseStatistics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStudyResponses",
			Handler:       _StudyServiceApi_StreamStudyResponses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/study-service.proto",
}
