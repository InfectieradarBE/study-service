// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: study_service/study-service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	api_types "github.com/influenzanet/go-utils/pkg/api_types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ServiceStatus_StatusValue int32

const (
	ServiceStatus_NORMAL  ServiceStatus_StatusValue = 0
	ServiceStatus_PROBLEM ServiceStatus_StatusValue = 1
)

// Enum value maps for ServiceStatus_StatusValue.
var (
	ServiceStatus_StatusValue_name = map[int32]string{
		0: "NORMAL",
		1: "PROBLEM",
	}
	ServiceStatus_StatusValue_value = map[string]int32{
		"NORMAL":  0,
		"PROBLEM": 1,
	}
)

func (x ServiceStatus_StatusValue) Enum() *ServiceStatus_StatusValue {
	p := new(ServiceStatus_StatusValue)
	*p = x
	return p
}

func (x ServiceStatus_StatusValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus_StatusValue) Descriptor() protoreflect.EnumDescriptor {
	return file_study_service_study_service_proto_enumTypes[0].Descriptor()
}

func (ServiceStatus_StatusValue) Type() protoreflect.EnumType {
	return &file_study_service_study_service_proto_enumTypes[0]
}

func (x ServiceStatus_StatusValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus_StatusValue.Descriptor instead.
func (ServiceStatus_StatusValue) EnumDescriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{8, 0}
}

type StudiesForUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Studies []*StudyForUser `protobuf:"bytes,1,rep,name=studies,proto3" json:"studies,omitempty"`
}

func (x *StudiesForUser) Reset() {
	*x = StudiesForUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudiesForUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudiesForUser) ProtoMessage() {}

func (x *StudiesForUser) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudiesForUser.ProtoReflect.Descriptor instead.
func (*StudiesForUser) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{0}
}

func (x *StudiesForUser) GetStudies() []*StudyForUser {
	if x != nil {
		return x.Studies
	}
	return nil
}

type FileType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Subtype string `protobuf:"bytes,2,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FileType) Reset() {
	*x = FileType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileType) ProtoMessage() {}

func (x *FileType) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileType.ProtoReflect.Descriptor instead.
func (*FileType) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{1}
}

func (x *FileType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileType) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *FileType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UploadParticipantFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*UploadParticipantFileReq_Info_
	//	*UploadParticipantFileReq_Chunk
	Data isUploadParticipantFileReq_Data `protobuf_oneof:"data"`
}

func (x *UploadParticipantFileReq) Reset() {
	*x = UploadParticipantFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadParticipantFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadParticipantFileReq) ProtoMessage() {}

func (x *UploadParticipantFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadParticipantFileReq.ProtoReflect.Descriptor instead.
func (*UploadParticipantFileReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{2}
}

func (m *UploadParticipantFileReq) GetData() isUploadParticipantFileReq_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UploadParticipantFileReq) GetInfo() *UploadParticipantFileReq_Info {
	if x, ok := x.GetData().(*UploadParticipantFileReq_Info_); ok {
		return x.Info
	}
	return nil
}

func (x *UploadParticipantFileReq) GetChunk() []byte {
	if x, ok := x.GetData().(*UploadParticipantFileReq_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isUploadParticipantFileReq_Data interface {
	isUploadParticipantFileReq_Data()
}

type UploadParticipantFileReq_Info_ struct {
	Info *UploadParticipantFileReq_Info `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type UploadParticipantFileReq_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadParticipantFileReq_Info_) isUploadParticipantFileReq_Data() {}

func (*UploadParticipantFileReq_Chunk) isUploadParticipantFileReq_Data() {}

type FileObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`      // DB id of the resource
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`  // it is referenced by survey response, or other object (like study)
	Time int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"` // when reference was created
}

func (x *FileObjectReference) Reset() {
	*x = FileObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileObjectReference) ProtoMessage() {}

func (x *FileObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileObjectReference.ProtoReflect.Descriptor instead.
func (*FileObjectReference) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{3}
}

func (x *FileObjectReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileObjectReference) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileObjectReference) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParticipantId        string                 `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	UploadedBy           string                 `protobuf:"bytes,3,opt,name=uploaded_by,json=uploadedBy,proto3" json:"uploaded_by,omitempty"` // if not uploaded by the participant
	Status               string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Path                 string                 `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	PreviewPath          string                 `protobuf:"bytes,6,opt,name=preview_path,json=previewPath,proto3" json:"preview_path,omitempty"`
	SubStudy             string                 `protobuf:"bytes,7,opt,name=sub_study,json=subStudy,proto3" json:"sub_study,omitempty"`
	SubmittedAt          int64                  `protobuf:"varint,8,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	FileType             string                 `protobuf:"bytes,9,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	VisibleToParticipant bool                   `protobuf:"varint,10,opt,name=visible_to_participant,json=visibleToParticipant,proto3" json:"visible_to_participant,omitempty"`
	Name                 string                 `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	ReferencedIn         []*FileObjectReference `protobuf:"bytes,12,rep,name=referenced_in,json=referencedIn,proto3" json:"referenced_in,omitempty"`
	Size                 int32                  `protobuf:"varint,13,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{4}
}

func (x *FileInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileInfo) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *FileInfo) GetUploadedBy() string {
	if x != nil {
		return x.UploadedBy
	}
	return ""
}

func (x *FileInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileInfo) GetPreviewPath() string {
	if x != nil {
		return x.PreviewPath
	}
	return ""
}

func (x *FileInfo) GetSubStudy() string {
	if x != nil {
		return x.SubStudy
	}
	return ""
}

func (x *FileInfo) GetSubmittedAt() int64 {
	if x != nil {
		return x.SubmittedAt
	}
	return 0
}

func (x *FileInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *FileInfo) GetVisibleToParticipant() bool {
	if x != nil {
		return x.VisibleToParticipant
	}
	return false
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetReferencedIn() []*FileObjectReference {
	if x != nil {
		return x.ReferencedIn
	}
	return nil
}

func (x *FileInfo) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SurveyResponseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyKey string                `protobuf:"bytes,3,opt,name=survey_key,json=surveyKey,proto3" json:"survey_key,omitempty"`
	From      int64                 `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	Until     int64                 `protobuf:"varint,5,opt,name=until,proto3" json:"until,omitempty"`
	// to query specific survey engine versions for example:
	ContextQuery map[string]string `protobuf:"bytes,6,rep,name=context_query,json=contextQuery,proto3" json:"context_query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SurveyResponseQuery) Reset() {
	*x = SurveyResponseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyResponseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyResponseQuery) ProtoMessage() {}

func (x *SurveyResponseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyResponseQuery.ProtoReflect.Descriptor instead.
func (*SurveyResponseQuery) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{5}
}

func (x *SurveyResponseQuery) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SurveyResponseQuery) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SurveyResponseQuery) GetSurveyKey() string {
	if x != nil {
		return x.SurveyKey
	}
	return ""
}

func (x *SurveyResponseQuery) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SurveyResponseQuery) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

func (x *SurveyResponseQuery) GetContextQuery() map[string]string {
	if x != nil {
		return x.ContextQuery
	}
	return nil
}

type StudyResponseStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyKey             string           `protobuf:"bytes,1,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyResponseCounts map[string]int64 `protobuf:"bytes,6,rep,name=survey_response_counts,json=surveyResponseCounts,proto3" json:"survey_response_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StudyResponseStatistics) Reset() {
	*x = StudyResponseStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyResponseStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyResponseStatistics) ProtoMessage() {}

func (x *StudyResponseStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyResponseStatistics.ProtoReflect.Descriptor instead.
func (*StudyResponseStatistics) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{6}
}

func (x *StudyResponseStatistics) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyResponseStatistics) GetSurveyResponseCounts() map[string]int64 {
	if x != nil {
		return x.SurveyResponseCounts
	}
	return nil
}

type ProfilesWithConditionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string   `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey   string   `protobuf:"bytes,2,opt,name=studyKey,proto3" json:"studyKey,omitempty"`
	ProfileIds []string `protobuf:"bytes,3,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
	// evaluate this expression for profiles if and until any of them fulfilles
	Condition *ExpressionArg `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *ProfilesWithConditionReq) Reset() {
	*x = ProfilesWithConditionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilesWithConditionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilesWithConditionReq) ProtoMessage() {}

func (x *ProfilesWithConditionReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilesWithConditionReq.ProtoReflect.Descriptor instead.
func (*ProfilesWithConditionReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{7}
}

func (x *ProfilesWithConditionReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ProfilesWithConditionReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *ProfilesWithConditionReq) GetProfileIds() []string {
	if x != nil {
		return x.ProfileIds
	}
	return nil
}

func (x *ProfilesWithConditionReq) GetCondition() *ExpressionArg {
	if x != nil {
		return x.Condition
	}
	return nil
}

type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ServiceStatus_StatusValue `protobuf:"varint,1,opt,name=status,proto3,enum=influenzanet.study_service.ServiceStatus_StatusValue" json:"status,omitempty"`
	Msg     string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Version string                    `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceStatus) GetStatus() ServiceStatus_StatusValue {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_NORMAL
}

func (x *ServiceStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ServiceStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type NewStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Study *Study                `protobuf:"bytes,2,opt,name=study,proto3" json:"study,omitempty"`
}

func (x *NewStudyRequest) Reset() {
	*x = NewStudyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStudyRequest) ProtoMessage() {}

func (x *NewStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStudyRequest.ProtoReflect.Descriptor instead.
func (*NewStudyRequest) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{9}
}

func (x *NewStudyRequest) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *NewStudyRequest) GetStudy() *Study {
	if x != nil {
		return x.Study
	}
	return nil
}

type SurveyAndContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Survey                 *Survey         `protobuf:"bytes,1,opt,name=survey,proto3" json:"survey,omitempty"`
	Context                *SurveyContext  `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	Prefill                *SurveyResponse `protobuf:"bytes,3,opt,name=prefill,proto3" json:"prefill,omitempty"`
	TemporaryParticipantId string          `protobuf:"bytes,4,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
}

func (x *SurveyAndContext) Reset() {
	*x = SurveyAndContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyAndContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyAndContext) ProtoMessage() {}

func (x *SurveyAndContext) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyAndContext.ProtoReflect.Descriptor instead.
func (*SurveyAndContext) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{10}
}

func (x *SurveyAndContext) GetSurvey() *Survey {
	if x != nil {
		return x.Survey
	}
	return nil
}

func (x *SurveyAndContext) GetContext() *SurveyContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *SurveyAndContext) GetPrefill() *SurveyResponse {
	if x != nil {
		return x.Prefill
	}
	return nil
}

func (x *SurveyAndContext) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

type StudyReferenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
}

func (x *StudyReferenceReq) Reset() {
	*x = StudyReferenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyReferenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyReferenceReq) ProtoMessage() {}

func (x *StudyReferenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyReferenceReq.ProtoReflect.Descriptor instead.
func (*StudyReferenceReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{11}
}

func (x *StudyReferenceReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyReferenceReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

type SurveyInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SurveyInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SurveyInfoResp) Reset() {
	*x = SurveyInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyInfoResp) ProtoMessage() {}

func (x *SurveyInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyInfoResp.ProtoReflect.Descriptor instead.
func (*SurveyInfoResp) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{12}
}

func (x *SurveyInfoResp) GetInfos() []*SurveyInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type AddSurveyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Survey   *Survey               `protobuf:"bytes,3,opt,name=survey,proto3" json:"survey,omitempty"`
}

func (x *AddSurveyReq) Reset() {
	*x = AddSurveyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSurveyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSurveyReq) ProtoMessage() {}

func (x *AddSurveyReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSurveyReq.ProtoReflect.Descriptor instead.
func (*AddSurveyReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{13}
}

func (x *AddSurveyReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *AddSurveyReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *AddSurveyReq) GetSurvey() *Survey {
	if x != nil {
		return x.Survey
	}
	return nil
}

type SubmitResponseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// identifies the user who is submitting
	StudyKey               string          `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Response               *SurveyResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	ProfileId              string          `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	TemporaryParticipantId string          `protobuf:"bytes,5,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
}

func (x *SubmitResponseReq) Reset() {
	*x = SubmitResponseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitResponseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitResponseReq) ProtoMessage() {}

func (x *SubmitResponseReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitResponseReq.ProtoReflect.Descriptor instead.
func (*SubmitResponseReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{14}
}

func (x *SubmitResponseReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SubmitResponseReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SubmitResponseReq) GetResponse() *SurveyResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubmitResponseReq) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *SubmitResponseReq) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

type EnterStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ProfileId string                `protobuf:"bytes,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *EnterStudyRequest) Reset() {
	*x = EnterStudyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterStudyRequest) ProtoMessage() {}

func (x *EnterStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterStudyRequest.ProtoReflect.Descriptor instead.
func (*EnterStudyRequest) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{15}
}

func (x *EnterStudyRequest) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *EnterStudyRequest) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *EnterStudyRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type LeaveStudyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ProfileId string                `protobuf:"bytes,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *LeaveStudyMsg) Reset() {
	*x = LeaveStudyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveStudyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveStudyMsg) ProtoMessage() {}

func (x *LeaveStudyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveStudyMsg.ProtoReflect.Descriptor instead.
func (*LeaveStudyMsg) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{16}
}

func (x *LeaveStudyMsg) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LeaveStudyMsg) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *LeaveStudyMsg) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type SurveyReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId             string                `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey               string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyKey              string                `protobuf:"bytes,3,opt,name=survey_key,json=surveyKey,proto3" json:"survey_key,omitempty"`
	ProfileId              string                `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	Token                  *api_types.TokenInfos `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	TemporaryParticipantId string                `protobuf:"bytes,6,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
}

func (x *SurveyReferenceRequest) Reset() {
	*x = SurveyReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyReferenceRequest) ProtoMessage() {}

func (x *SurveyReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyReferenceRequest.ProtoReflect.Descriptor instead.
func (*SurveyReferenceRequest) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{17}
}

func (x *SurveyReferenceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SurveyReferenceRequest) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SurveyReferenceRequest) GetSurveyKey() string {
	if x != nil {
		return x.SurveyKey
	}
	return ""
}

func (x *SurveyReferenceRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *SurveyReferenceRequest) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SurveyReferenceRequest) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

type GetStudiesForUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetStudiesForUserReq) Reset() {
	*x = GetStudiesForUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStudiesForUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudiesForUserReq) ProtoMessage() {}

func (x *GetStudiesForUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudiesForUserReq.ProtoReflect.Descriptor instead.
func (*GetStudiesForUserReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetStudiesForUserReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

type Studies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Studies []*Study `protobuf:"bytes,1,rep,name=studies,proto3" json:"studies,omitempty"`
}

func (x *Studies) Reset() {
	*x = Studies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Studies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Studies) ProtoMessage() {}

func (x *Studies) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Studies.ProtoReflect.Descriptor instead.
func (*Studies) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{19}
}

func (x *Studies) GetStudies() []*Study {
	if x != nil {
		return x.Studies
	}
	return nil
}

type StudyMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Member   *Study_Member         `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *StudyMemberReq) Reset() {
	*x = StudyMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyMemberReq) ProtoMessage() {}

func (x *StudyMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyMemberReq.ProtoReflect.Descriptor instead.
func (*StudyMemberReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{20}
}

func (x *StudyMemberReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyMemberReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyMemberReq) GetMember() *Study_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type StudyRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Rules    []*Expression         `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *StudyRulesReq) Reset() {
	*x = StudyRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyRulesReq) ProtoMessage() {}

func (x *StudyRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyRulesReq.ProtoReflect.Descriptor instead.
func (*StudyRulesReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{21}
}

func (x *StudyRulesReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyRulesReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyRulesReq) GetRules() []*Expression {
	if x != nil {
		return x.Rules
	}
	return nil
}

type StudyStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	NewStatus string                `protobuf:"bytes,3,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (x *StudyStatusReq) Reset() {
	*x = StudyStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyStatusReq) ProtoMessage() {}

func (x *StudyStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyStatusReq.ProtoReflect.Descriptor instead.
func (*StudyStatusReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{22}
}

func (x *StudyStatusReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyStatusReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyStatusReq) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

type StudyPropsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Props    *Study_Props          `protobuf:"bytes,3,opt,name=props,proto3" json:"props,omitempty"`
}

func (x *StudyPropsReq) Reset() {
	*x = StudyPropsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyPropsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyPropsReq) ProtoMessage() {}

func (x *StudyPropsReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyPropsReq.ProtoReflect.Descriptor instead.
func (*StudyPropsReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{23}
}

func (x *StudyPropsReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyPropsReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyPropsReq) GetProps() *Study_Props {
	if x != nil {
		return x.Props
	}
	return nil
}

type RuleRunSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantCount              int32   `protobuf:"varint,1,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
	ParticipantStateChangePerRule []int32 `protobuf:"varint,2,rep,packed,name=participant_state_change_per_rule,json=participantStateChangePerRule,proto3" json:"participant_state_change_per_rule,omitempty"`
	Duration                      int64   `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *RuleRunSummary) Reset() {
	*x = RuleRunSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRunSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRunSummary) ProtoMessage() {}

func (x *RuleRunSummary) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRunSummary.ProtoReflect.Descriptor instead.
func (*RuleRunSummary) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{24}
}

func (x *RuleRunSummary) GetParticipantCount() int32 {
	if x != nil {
		return x.ParticipantCount
	}
	return 0
}

func (x *RuleRunSummary) GetParticipantStateChangePerRule() []int32 {
	if x != nil {
		return x.ParticipantStateChangePerRule
	}
	return nil
}

func (x *RuleRunSummary) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type ConvertTempParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token                  *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey               string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	TemporaryParticipantId string                `protobuf:"bytes,3,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
	ProfileId              string                `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *ConvertTempParticipantReq) Reset() {
	*x = ConvertTempParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertTempParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertTempParticipantReq) ProtoMessage() {}

func (x *ConvertTempParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertTempParticipantReq.ProtoReflect.Descriptor instead.
func (*ConvertTempParticipantReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{25}
}

func (x *ConvertTempParticipantReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ConvertTempParticipantReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *ConvertTempParticipantReq) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

func (x *ConvertTempParticipantReq) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type RegisterTempParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey   string `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
}

func (x *RegisterTempParticipantReq) Reset() {
	*x = RegisterTempParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTempParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTempParticipantReq) ProtoMessage() {}

func (x *RegisterTempParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTempParticipantReq.ProtoReflect.Descriptor instead.
func (*RegisterTempParticipantReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{26}
}

func (x *RegisterTempParticipantReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RegisterTempParticipantReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

type RegisterTempParticipantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemporaryParticipantId string `protobuf:"bytes,1,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
}

func (x *RegisterTempParticipantResponse) Reset() {
	*x = RegisterTempParticipantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTempParticipantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTempParticipantResponse) ProtoMessage() {}

func (x *RegisterTempParticipantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTempParticipantResponse.ProtoReflect.Descriptor instead.
func (*RegisterTempParticipantResponse) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{27}
}

func (x *RegisterTempParticipantResponse) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

type GetAssignedSurveysForTemporaryParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId             string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey               string `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	TemporaryParticipantId string `protobuf:"bytes,3,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) Reset() {
	*x = GetAssignedSurveysForTemporaryParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssignedSurveysForTemporaryParticipantReq) ProtoMessage() {}

func (x *GetAssignedSurveysForTemporaryParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssignedSurveysForTemporaryParticipantReq.ProtoReflect.Descriptor instead.
func (*GetAssignedSurveysForTemporaryParticipantReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{28}
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

type UploadParticipantFileReq_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SubStudy string                `protobuf:"bytes,3,opt,name=sub_study,json=subStudy,proto3" json:"sub_study,omitempty"`
	// Types that are assignable to Participant:
	//	*UploadParticipantFileReq_Info_ProfileId
	//	*UploadParticipantFileReq_Info_ParticipantId
	Participant          isUploadParticipantFileReq_Info_Participant `protobuf_oneof:"participant"`
	FileType             *FileType                                   `protobuf:"bytes,6,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	VisibleToParticipant bool                                        `protobuf:"varint,7,opt,name=visible_to_participant,json=visibleToParticipant,proto3" json:"visible_to_participant,omitempty"`
}

func (x *UploadParticipantFileReq_Info) Reset() {
	*x = UploadParticipantFileReq_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadParticipantFileReq_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadParticipantFileReq_Info) ProtoMessage() {}

func (x *UploadParticipantFileReq_Info) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadParticipantFileReq_Info.ProtoReflect.Descriptor instead.
func (*UploadParticipantFileReq_Info) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *UploadParticipantFileReq_Info) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *UploadParticipantFileReq_Info) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *UploadParticipantFileReq_Info) GetSubStudy() string {
	if x != nil {
		return x.SubStudy
	}
	return ""
}

func (m *UploadParticipantFileReq_Info) GetParticipant() isUploadParticipantFileReq_Info_Participant {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (x *UploadParticipantFileReq_Info) GetProfileId() string {
	if x, ok := x.GetParticipant().(*UploadParticipantFileReq_Info_ProfileId); ok {
		return x.ProfileId
	}
	return ""
}

func (x *UploadParticipantFileReq_Info) GetParticipantId() string {
	if x, ok := x.GetParticipant().(*UploadParticipantFileReq_Info_ParticipantId); ok {
		return x.ParticipantId
	}
	return ""
}

func (x *UploadParticipantFileReq_Info) GetFileType() *FileType {
	if x != nil {
		return x.FileType
	}
	return nil
}

func (x *UploadParticipantFileReq_Info) GetVisibleToParticipant() bool {
	if x != nil {
		return x.VisibleToParticipant
	}
	return false
}

type isUploadParticipantFileReq_Info_Participant interface {
	isUploadParticipantFileReq_Info_Participant()
}

type UploadParticipantFileReq_Info_ProfileId struct {
	ProfileId string `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3,oneof"`
}

type UploadParticipantFileReq_Info_ParticipantId struct {
	ParticipantId string `protobuf:"bytes,5,opt,name=participant_id,json=participantId,proto3,oneof"` // if researcher upload for participant directly
}

func (*UploadParticipantFileReq_Info_ProfileId) isUploadParticipantFileReq_Info_Participant() {}

func (*UploadParticipantFileReq_Info_ParticipantId) isUploadParticipantFileReq_Info_Participant() {}

var File_study_service_study_service_proto protoreflect.FileDescriptor

var file_study_service_study_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54,
	0x0a, 0x0e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x4f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0xc9, 0x02, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d,
	0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc2, 0x03,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x13, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x66, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x85, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a,
	0x47, 0x0a, 0x19, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x67, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10,
	0x01, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x05,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x05,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x06,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c,
	0x6c, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x11, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x4b, 0x65, 0x79, 0x22, 0x4e, 0x0a, 0x0e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x06, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x22, 0x88, 0x02, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x46, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x86, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x85,
	0x02, 0x0a, 0x16, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x18,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x35,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x46, 0x0a, 0x07, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x22, 0xa6, 0x01,
	0x0a, 0x0e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x70, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x1d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a,
	0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b,
	0x65, 0x79, 0x22, 0x5b, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xa6, 0x01, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x32, 0xa9, 0x1e, 0x0a, 0x0f, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x12, 0x4b, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x68, 0x0a, 0x0a, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x73, 0x12, 0x62, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x32, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6c,
	0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x64, 0x0a, 0x0a,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x29, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x34, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x28, 0x01, 0x12, 0x93,
	0x01, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x36, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x3b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x48, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x71, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x83, 0x01, 0x0a,
	0x20, 0x48, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x12, 0x55, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x60, 0x0a, 0x0f, 0x53, 0x61, 0x76,
	0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x62, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12,
	0x5e, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12,
	0x60, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x5e, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x61, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x54,
	0x6f, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x12, 0x6e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x44, 0x65, 0x66, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x32, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x12, 0x76, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x32, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2d, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x75, 0x0a,
	0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x57, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x53,
	0x56, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x43, 0x53, 0x56, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6c, 0x61, 0x74, 0x4a, 0x53,
	0x4f, 0x4e, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x53, 0x56, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_study_service_study_service_proto_rawDescOnce sync.Once
	file_study_service_study_service_proto_rawDescData = file_study_service_study_service_proto_rawDesc
)

func file_study_service_study_service_proto_rawDescGZIP() []byte {
	file_study_service_study_service_proto_rawDescOnce.Do(func() {
		file_study_service_study_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_study_service_study_service_proto_rawDescData)
	})
	return file_study_service_study_service_proto_rawDescData
}

var file_study_service_study_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_study_service_study_service_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_study_service_study_service_proto_goTypes = []interface{}{
	(ServiceStatus_StatusValue)(0),                       // 0: influenzanet.study_service.ServiceStatus.StatusValue
	(*StudiesForUser)(nil),                               // 1: influenzanet.study_service.StudiesForUser
	(*FileType)(nil),                                     // 2: influenzanet.study_service.FileType
	(*UploadParticipantFileReq)(nil),                     // 3: influenzanet.study_service.UploadParticipantFileReq
	(*FileObjectReference)(nil),                          // 4: influenzanet.study_service.FileObjectReference
	(*FileInfo)(nil),                                     // 5: influenzanet.study_service.FileInfo
	(*SurveyResponseQuery)(nil),                          // 6: influenzanet.study_service.SurveyResponseQuery
	(*StudyResponseStatistics)(nil),                      // 7: influenzanet.study_service.StudyResponseStatistics
	(*ProfilesWithConditionReq)(nil),                     // 8: influenzanet.study_service.ProfilesWithConditionReq
	(*ServiceStatus)(nil),                                // 9: influenzanet.study_service.ServiceStatus
	(*NewStudyRequest)(nil),                              // 10: influenzanet.study_service.NewStudyRequest
	(*SurveyAndContext)(nil),                             // 11: influenzanet.study_service.SurveyAndContext
	(*StudyReferenceReq)(nil),                            // 12: influenzanet.study_service.StudyReferenceReq
	(*SurveyInfoResp)(nil),                               // 13: influenzanet.study_service.SurveyInfoResp
	(*AddSurveyReq)(nil),                                 // 14: influenzanet.study_service.AddSurveyReq
	(*SubmitResponseReq)(nil),                            // 15: influenzanet.study_service.SubmitResponseReq
	(*EnterStudyRequest)(nil),                            // 16: influenzanet.study_service.EnterStudyRequest
	(*LeaveStudyMsg)(nil),                                // 17: influenzanet.study_service.LeaveStudyMsg
	(*SurveyReferenceRequest)(nil),                       // 18: influenzanet.study_service.SurveyReferenceRequest
	(*GetStudiesForUserReq)(nil),                         // 19: influenzanet.study_service.GetStudiesForUserReq
	(*Studies)(nil),                                      // 20: influenzanet.study_service.Studies
	(*StudyMemberReq)(nil),                               // 21: influenzanet.study_service.StudyMemberReq
	(*StudyRulesReq)(nil),                                // 22: influenzanet.study_service.StudyRulesReq
	(*StudyStatusReq)(nil),                               // 23: influenzanet.study_service.StudyStatusReq
	(*StudyPropsReq)(nil),                                // 24: influenzanet.study_service.StudyPropsReq
	(*RuleRunSummary)(nil),                               // 25: influenzanet.study_service.RuleRunSummary
	(*ConvertTempParticipantReq)(nil),                    // 26: influenzanet.study_service.ConvertTempParticipantReq
	(*RegisterTempParticipantReq)(nil),                   // 27: influenzanet.study_service.RegisterTempParticipantReq
	(*RegisterTempParticipantResponse)(nil),              // 28: influenzanet.study_service.RegisterTempParticipantResponse
	(*GetAssignedSurveysForTemporaryParticipantReq)(nil), // 29: influenzanet.study_service.GetAssignedSurveysForTemporaryParticipantReq
	(*UploadParticipantFileReq_Info)(nil),                // 30: influenzanet.study_service.UploadParticipantFileReq.Info
	nil,                                                  // 31: influenzanet.study_service.SurveyResponseQuery.ContextQueryEntry
	nil,                                                  // 32: influenzanet.study_service.StudyResponseStatistics.SurveyResponseCountsEntry
	(*StudyForUser)(nil),                                 // 33: influenzanet.study_service.StudyForUser
	(*api_types.TokenInfos)(nil),                         // 34: influenzanet.shared.TokenInfos
	(*ExpressionArg)(nil),                                // 35: influenzanet.study_service.ExpressionArg
	(*Study)(nil),                                        // 36: influenzanet.study_service.Study
	(*Survey)(nil),                                       // 37: influenzanet.study_service.Survey
	(*SurveyContext)(nil),                                // 38: influenzanet.study_service.SurveyContext
	(*SurveyResponse)(nil),                               // 39: influenzanet.study_service.SurveyResponse
	(*SurveyInfo)(nil),                                   // 40: influenzanet.study_service.SurveyInfo
	(*Study_Member)(nil),                                 // 41: influenzanet.study_service.Study.Member
	(*Expression)(nil),                                   // 42: influenzanet.study_service.Expression
	(*Study_Props)(nil),                                  // 43: influenzanet.study_service.Study.Props
	(*empty.Empty)(nil),                                  // 44: google.protobuf.Empty
	(*ResponseExportQuery)(nil),                          // 45: influenzanet.study_service.ResponseExportQuery
	(*SurveyInfoExportQuery)(nil),                        // 46: influenzanet.study_service.SurveyInfoExportQuery
	(*AssignedSurveys)(nil),                              // 47: influenzanet.study_service.AssignedSurveys
	(*Chunk)(nil),                                        // 48: influenzanet.study_service.Chunk
	(*SurveyInfoExport)(nil),                             // 49: influenzanet.study_service.SurveyInfoExport
}
var file_study_service_study_service_proto_depIdxs = []int32{
	33, // 0: influenzanet.study_service.StudiesForUser.studies:type_name -> influenzanet.study_service.StudyForUser
	30, // 1: influenzanet.study_service.UploadParticipantFileReq.info:type_name -> influenzanet.study_service.UploadParticipantFileReq.Info
	4,  // 2: influenzanet.study_service.FileInfo.referenced_in:type_name -> influenzanet.study_service.FileObjectReference
	34, // 3: influenzanet.study_service.SurveyResponseQuery.token:type_name -> influenzanet.shared.TokenInfos
	31, // 4: influenzanet.study_service.SurveyResponseQuery.context_query:type_name -> influenzanet.study_service.SurveyResponseQuery.ContextQueryEntry
	32, // 5: influenzanet.study_service.StudyResponseStatistics.survey_response_counts:type_name -> influenzanet.study_service.StudyResponseStatistics.SurveyResponseCountsEntry
	35, // 6: influenzanet.study_service.ProfilesWithConditionReq.condition:type_name -> influenzanet.study_service.ExpressionArg
	0,  // 7: influenzanet.study_service.ServiceStatus.status:type_name -> influenzanet.study_service.ServiceStatus.StatusValue
	34, // 8: influenzanet.study_service.NewStudyRequest.token:type_name -> influenzanet.shared.TokenInfos
	36, // 9: influenzanet.study_service.NewStudyRequest.study:type_name -> influenzanet.study_service.Study
	37, // 10: influenzanet.study_service.SurveyAndContext.survey:type_name -> influenzanet.study_service.Survey
	38, // 11: influenzanet.study_service.SurveyAndContext.context:type_name -> influenzanet.study_service.SurveyContext
	39, // 12: influenzanet.study_service.SurveyAndContext.prefill:type_name -> influenzanet.study_service.SurveyResponse
	34, // 13: influenzanet.study_service.StudyReferenceReq.token:type_name -> influenzanet.shared.TokenInfos
	40, // 14: influenzanet.study_service.SurveyInfoResp.infos:type_name -> influenzanet.study_service.SurveyInfo
	34, // 15: influenzanet.study_service.AddSurveyReq.token:type_name -> influenzanet.shared.TokenInfos
	37, // 16: influenzanet.study_service.AddSurveyReq.survey:type_name -> influenzanet.study_service.Survey
	34, // 17: influenzanet.study_service.SubmitResponseReq.token:type_name -> influenzanet.shared.TokenInfos
	39, // 18: influenzanet.study_service.SubmitResponseReq.response:type_name -> influenzanet.study_service.SurveyResponse
	34, // 19: influenzanet.study_service.EnterStudyRequest.token:type_name -> influenzanet.shared.TokenInfos
	34, // 20: influenzanet.study_service.LeaveStudyMsg.token:type_name -> influenzanet.shared.TokenInfos
	34, // 21: influenzanet.study_service.SurveyReferenceRequest.token:type_name -> influenzanet.shared.TokenInfos
	34, // 22: influenzanet.study_service.GetStudiesForUserReq.token:type_name -> influenzanet.shared.TokenInfos
	36, // 23: influenzanet.study_service.Studies.studies:type_name -> influenzanet.study_service.Study
	34, // 24: influenzanet.study_service.StudyMemberReq.token:type_name -> influenzanet.shared.TokenInfos
	41, // 25: influenzanet.study_service.StudyMemberReq.member:type_name -> influenzanet.study_service.Study.Member
	34, // 26: influenzanet.study_service.StudyRulesReq.token:type_name -> influenzanet.shared.TokenInfos
	42, // 27: influenzanet.study_service.StudyRulesReq.rules:type_name -> influenzanet.study_service.Expression
	34, // 28: influenzanet.study_service.StudyStatusReq.token:type_name -> influenzanet.shared.TokenInfos
	34, // 29: influenzanet.study_service.StudyPropsReq.token:type_name -> influenzanet.shared.TokenInfos
	43, // 30: influenzanet.study_service.StudyPropsReq.props:type_name -> influenzanet.study_service.Study.Props
	34, // 31: influenzanet.study_service.ConvertTempParticipantReq.token:type_name -> influenzanet.shared.TokenInfos
	34, // 32: influenzanet.study_service.UploadParticipantFileReq.Info.token:type_name -> influenzanet.shared.TokenInfos
	2,  // 33: influenzanet.study_service.UploadParticipantFileReq.Info.file_type:type_name -> influenzanet.study_service.FileType
	44, // 34: influenzanet.study_service.StudyServiceApi.Status:input_type -> google.protobuf.Empty
	16, // 35: influenzanet.study_service.StudyServiceApi.EnterStudy:input_type -> influenzanet.study_service.EnterStudyRequest
	34, // 36: influenzanet.study_service.StudyServiceApi.GetAssignedSurveys:input_type -> influenzanet.shared.TokenInfos
	18, // 37: influenzanet.study_service.StudyServiceApi.GetAssignedSurvey:input_type -> influenzanet.study_service.SurveyReferenceRequest
	15, // 38: influenzanet.study_service.StudyServiceApi.SubmitResponse:input_type -> influenzanet.study_service.SubmitResponseReq
	17, // 39: influenzanet.study_service.StudyServiceApi.LeaveStudy:input_type -> influenzanet.study_service.LeaveStudyMsg
	34, // 40: influenzanet.study_service.StudyServiceApi.DeleteParticipantData:input_type -> influenzanet.shared.TokenInfos
	3,  // 41: influenzanet.study_service.StudyServiceApi.UploadParticipantFile:input_type -> influenzanet.study_service.UploadParticipantFileReq
	27, // 42: influenzanet.study_service.StudyServiceApi.RegisterTemporaryParticipant:input_type -> influenzanet.study_service.RegisterTempParticipantReq
	26, // 43: influenzanet.study_service.StudyServiceApi.ConvertTemporaryToParticipant:input_type -> influenzanet.study_service.ConvertTempParticipantReq
	29, // 44: influenzanet.study_service.StudyServiceApi.GetAssignedSurveysForTemporaryParticipant:input_type -> influenzanet.study_service.GetAssignedSurveysForTemporaryParticipantReq
	19, // 45: influenzanet.study_service.StudyServiceApi.GetStudiesForUser:input_type -> influenzanet.study_service.GetStudiesForUserReq
	34, // 46: influenzanet.study_service.StudyServiceApi.GetActiveStudies:input_type -> influenzanet.shared.TokenInfos
	12, // 47: influenzanet.study_service.StudyServiceApi.GetStudySurveyInfos:input_type -> influenzanet.study_service.StudyReferenceReq
	8,  // 48: influenzanet.study_service.StudyServiceApi.HasParticipantStateWithCondition:input_type -> influenzanet.study_service.ProfilesWithConditionReq
	10, // 49: influenzanet.study_service.StudyServiceApi.CreateNewStudy:input_type -> influenzanet.study_service.NewStudyRequest
	34, // 50: influenzanet.study_service.StudyServiceApi.GetAllStudies:input_type -> influenzanet.shared.TokenInfos
	12, // 51: influenzanet.study_service.StudyServiceApi.GetStudy:input_type -> influenzanet.study_service.StudyReferenceReq
	21, // 52: influenzanet.study_service.StudyServiceApi.SaveStudyMember:input_type -> influenzanet.study_service.StudyMemberReq
	21, // 53: influenzanet.study_service.StudyServiceApi.RemoveStudyMember:input_type -> influenzanet.study_service.StudyMemberReq
	22, // 54: influenzanet.study_service.StudyServiceApi.SaveStudyRules:input_type -> influenzanet.study_service.StudyRulesReq
	23, // 55: influenzanet.study_service.StudyServiceApi.SaveStudyStatus:input_type -> influenzanet.study_service.StudyStatusReq
	24, // 56: influenzanet.study_service.StudyServiceApi.SaveStudyProps:input_type -> influenzanet.study_service.StudyPropsReq
	14, // 57: influenzanet.study_service.StudyServiceApi.SaveSurveyToStudy:input_type -> influenzanet.study_service.AddSurveyReq
	18, // 58: influenzanet.study_service.StudyServiceApi.GetSurveyDefForStudy:input_type -> influenzanet.study_service.SurveyReferenceRequest
	18, // 59: influenzanet.study_service.StudyServiceApi.RemoveSurveyFromStudy:input_type -> influenzanet.study_service.SurveyReferenceRequest
	12, // 60: influenzanet.study_service.StudyServiceApi.DeleteStudy:input_type -> influenzanet.study_service.StudyReferenceReq
	22, // 61: influenzanet.study_service.StudyServiceApi.RunRules:input_type -> influenzanet.study_service.StudyRulesReq
	6,  // 62: influenzanet.study_service.StudyServiceApi.GetStudyResponseStatistics:input_type -> influenzanet.study_service.SurveyResponseQuery
	6,  // 63: influenzanet.study_service.StudyServiceApi.StreamStudyResponses:input_type -> influenzanet.study_service.SurveyResponseQuery
	45, // 64: influenzanet.study_service.StudyServiceApi.GetResponsesWideFormatCSV:input_type -> influenzanet.study_service.ResponseExportQuery
	45, // 65: influenzanet.study_service.StudyServiceApi.GetResponsesLongFormatCSV:input_type -> influenzanet.study_service.ResponseExportQuery
	45, // 66: influenzanet.study_service.StudyServiceApi.GetResponsesFlatJSON:input_type -> influenzanet.study_service.ResponseExportQuery
	46, // 67: influenzanet.study_service.StudyServiceApi.GetSurveyInfoPreviewCSV:input_type -> influenzanet.study_service.SurveyInfoExportQuery
	46, // 68: influenzanet.study_service.StudyServiceApi.GetSurveyInfoPreview:input_type -> influenzanet.study_service.SurveyInfoExportQuery
	9,  // 69: influenzanet.study_service.StudyServiceApi.Status:output_type -> influenzanet.study_service.ServiceStatus
	47, // 70: influenzanet.study_service.StudyServiceApi.EnterStudy:output_type -> influenzanet.study_service.AssignedSurveys
	47, // 71: influenzanet.study_service.StudyServiceApi.GetAssignedSurveys:output_type -> influenzanet.study_service.AssignedSurveys
	11, // 72: influenzanet.study_service.StudyServiceApi.GetAssignedSurvey:output_type -> influenzanet.study_service.SurveyAndContext
	47, // 73: influenzanet.study_service.StudyServiceApi.SubmitResponse:output_type -> influenzanet.study_service.AssignedSurveys
	47, // 74: influenzanet.study_service.StudyServiceApi.LeaveStudy:output_type -> influenzanet.study_service.AssignedSurveys
	9,  // 75: influenzanet.study_service.StudyServiceApi.DeleteParticipantData:output_type -> influenzanet.study_service.ServiceStatus
	5,  // 76: influenzanet.study_service.StudyServiceApi.UploadParticipantFile:output_type -> influenzanet.study_service.FileInfo
	28, // 77: influenzanet.study_service.StudyServiceApi.RegisterTemporaryParticipant:output_type -> influenzanet.study_service.RegisterTempParticipantResponse
	9,  // 78: influenzanet.study_service.StudyServiceApi.ConvertTemporaryToParticipant:output_type -> influenzanet.study_service.ServiceStatus
	47, // 79: influenzanet.study_service.StudyServiceApi.GetAssignedSurveysForTemporaryParticipant:output_type -> influenzanet.study_service.AssignedSurveys
	1,  // 80: influenzanet.study_service.StudyServiceApi.GetStudiesForUser:output_type -> influenzanet.study_service.StudiesForUser
	20, // 81: influenzanet.study_service.StudyServiceApi.GetActiveStudies:output_type -> influenzanet.study_service.Studies
	13, // 82: influenzanet.study_service.StudyServiceApi.GetStudySurveyInfos:output_type -> influenzanet.study_service.SurveyInfoResp
	9,  // 83: influenzanet.study_service.StudyServiceApi.HasParticipantStateWithCondition:output_type -> influenzanet.study_service.ServiceStatus
	36, // 84: influenzanet.study_service.StudyServiceApi.CreateNewStudy:output_type -> influenzanet.study_service.Study
	20, // 85: influenzanet.study_service.StudyServiceApi.GetAllStudies:output_type -> influenzanet.study_service.Studies
	36, // 86: influenzanet.study_service.StudyServiceApi.GetStudy:output_type -> influenzanet.study_service.Study
	36, // 87: influenzanet.study_service.StudyServiceApi.SaveStudyMember:output_type -> influenzanet.study_service.Study
	36, // 88: influenzanet.study_service.StudyServiceApi.RemoveStudyMember:output_type -> influenzanet.study_service.Study
	36, // 89: influenzanet.study_service.StudyServiceApi.SaveStudyRules:output_type -> influenzanet.study_service.Study
	36, // 90: influenzanet.study_service.StudyServiceApi.SaveStudyStatus:output_type -> influenzanet.study_service.Study
	36, // 91: influenzanet.study_service.StudyServiceApi.SaveStudyProps:output_type -> influenzanet.study_service.Study
	37, // 92: influenzanet.study_service.StudyServiceApi.SaveSurveyToStudy:output_type -> influenzanet.study_service.Survey
	37, // 93: influenzanet.study_service.StudyServiceApi.GetSurveyDefForStudy:output_type -> influenzanet.study_service.Survey
	9,  // 94: influenzanet.study_service.StudyServiceApi.RemoveSurveyFromStudy:output_type -> influenzanet.study_service.ServiceStatus
	9,  // 95: influenzanet.study_service.StudyServiceApi.DeleteStudy:output_type -> influenzanet.study_service.ServiceStatus
	25, // 96: influenzanet.study_service.StudyServiceApi.RunRules:output_type -> influenzanet.study_service.RuleRunSummary
	7,  // 97: influenzanet.study_service.StudyServiceApi.GetStudyResponseStatistics:output_type -> influenzanet.study_service.StudyResponseStatistics
	39, // 98: influenzanet.study_service.StudyServiceApi.StreamStudyResponses:output_type -> influenzanet.study_service.SurveyResponse
	48, // 99: influenzanet.study_service.StudyServiceApi.GetResponsesWideFormatCSV:output_type -> influenzanet.study_service.Chunk
	48, // 100: influenzanet.study_service.StudyServiceApi.GetResponsesLongFormatCSV:output_type -> influenzanet.study_service.Chunk
	48, // 101: influenzanet.study_service.StudyServiceApi.GetResponsesFlatJSON:output_type -> influenzanet.study_service.Chunk
	48, // 102: influenzanet.study_service.StudyServiceApi.GetSurveyInfoPreviewCSV:output_type -> influenzanet.study_service.Chunk
	49, // 103: influenzanet.study_service.StudyServiceApi.GetSurveyInfoPreview:output_type -> influenzanet.study_service.SurveyInfoExport
	69, // [69:104] is the sub-list for method output_type
	34, // [34:69] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_study_service_study_service_proto_init() }
func file_study_service_study_service_proto_init() {
	if File_study_service_study_service_proto != nil {
		return
	}
	file_study_service_study_proto_init()
	file_study_service_exporter_proto_init()
	file_study_service_survey_proto_init()
	file_study_service_expression_proto_init()
	file_study_service_survey_response_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_study_service_study_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudiesForUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadParticipantFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyResponseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyResponseStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilesWithConditionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStudyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyAndContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyReferenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSurveyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitResponseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterStudyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveStudyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStudiesForUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Studies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyPropsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRunSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertTempParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTempParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTempParticipantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssignedSurveysForTemporaryParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadParticipantFileReq_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_study_service_study_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*UploadParticipantFileReq_Info_)(nil),
		(*UploadParticipantFileReq_Chunk)(nil),
	}
	file_study_service_study_service_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*UploadParticipantFileReq_Info_ProfileId)(nil),
		(*UploadParticipantFileReq_Info_ParticipantId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_study_service_study_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_study_service_study_service_proto_goTypes,
		DependencyIndexes: file_study_service_study_service_proto_depIdxs,
		EnumInfos:         file_study_service_study_service_proto_enumTypes,
		MessageInfos:      file_study_service_study_service_proto_msgTypes,
	}.Build()
	File_study_service_study_service_proto = out.File
	file_study_service_study_service_proto_rawDesc = nil
	file_study_service_study_service_proto_goTypes = nil
	file_study_service_study_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StudyServiceApiClient is the client API for StudyServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudyServiceApiClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServiceStatus, error)
	// Study flow
	EnterStudy(ctx context.Context, in *EnterStudyRequest, opts ...grpc.CallOption) (*AssignedSurveys, error)
	GetAssignedSurveys(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*AssignedSurveys, error)
	GetAssignedSurvey(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*SurveyAndContext, error)
	SubmitResponse(ctx context.Context, in *SubmitResponseReq, opts ...grpc.CallOption) (*AssignedSurveys, error)
	LeaveStudy(ctx context.Context, in *LeaveStudyMsg, opts ...grpc.CallOption) (*AssignedSurveys, error)
	DeleteParticipantData(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*ServiceStatus, error)
	UploadParticipantFile(ctx context.Context, opts ...grpc.CallOption) (StudyServiceApi_UploadParticipantFileClient, error)
	//rpc GetParticipantFiles(GetParticipantFilesReq) returns (GetParticipantFilesResp);
	//rpc GetParticipantFile(GetParticipantFileReq) returns (stream Chunk);
	//rpc GetParticipantFilePreview(GetParticipantFileReq) returns (stream Chunk);
	//rpc DeleteParticipantFiles(DeleteParticipantFilesReq) returns (DeleteParticipantFilesResp);
	//rpc BulkDownloadParticipantFiles(BulkDownloadParticipantFilesReq) returns (stream Chunk);
	RegisterTemporaryParticipant(ctx context.Context, in *RegisterTempParticipantReq, opts ...grpc.CallOption) (*RegisterTempParticipantResponse, error)
	ConvertTemporaryToParticipant(ctx context.Context, in *ConvertTempParticipantReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	GetAssignedSurveysForTemporaryParticipant(ctx context.Context, in *GetAssignedSurveysForTemporaryParticipantReq, opts ...grpc.CallOption) (*AssignedSurveys, error)
	// for all profiles (also not active studies):
	GetStudiesForUser(ctx context.Context, in *GetStudiesForUserReq, opts ...grpc.CallOption) (*StudiesForUser, error)
	// all active studies even if user not in:
	GetActiveStudies(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*Studies, error)
	// get info about surveys in a study:
	GetStudySurveyInfos(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*SurveyInfoResp, error)
	// any user profile is in the study and one state matches condition:
	HasParticipantStateWithCondition(ctx context.Context, in *ProfilesWithConditionReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	// ---> Study management
	CreateNewStudy(ctx context.Context, in *NewStudyRequest, opts ...grpc.CallOption) (*Study, error)
	GetAllStudies(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*Studies, error)
	GetStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*Study, error)
	// add, update and remove study members (and roles):
	SaveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error)
	RemoveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error)
	SaveStudyRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*Study, error)
	SaveStudyStatus(ctx context.Context, in *StudyStatusReq, opts ...grpc.CallOption) (*Study, error)
	SaveStudyProps(ctx context.Context, in *StudyPropsReq, opts ...grpc.CallOption) (*Study, error)
	SaveSurveyToStudy(ctx context.Context, in *AddSurveyReq, opts ...grpc.CallOption) (*Survey, error)
	GetSurveyDefForStudy(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*Survey, error)
	RemoveSurveyFromStudy(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*ServiceStatus, error)
	DeleteStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	RunRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*RuleRunSummary, error)
	// Data access:
	GetStudyResponseStatistics(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (*StudyResponseStatistics, error)
	StreamStudyResponses(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamStudyResponsesClient, error)
	GetResponsesWideFormatCSV(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesWideFormatCSVClient, error)
	GetResponsesLongFormatCSV(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesLongFormatCSVClient, error)
	GetResponsesFlatJSON(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesFlatJSONClient, error)
	GetSurveyInfoPreviewCSV(ctx context.Context, in *SurveyInfoExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetSurveyInfoPreviewCSVClient, error)
	GetSurveyInfoPreview(ctx context.Context, in *SurveyInfoExportQuery, opts ...grpc.CallOption) (*SurveyInfoExport, error)
}

type studyServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyServiceApiClient(cc grpc.ClientConnInterface) StudyServiceApiClient {
	return &studyServiceApiClient{cc}
}

func (c *studyServiceApiClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) EnterStudy(ctx context.Context, in *EnterStudyRequest, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/EnterStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAssignedSurveys(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetAssignedSurveys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAssignedSurvey(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*SurveyAndContext, error) {
	out := new(SurveyAndContext)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetAssignedSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SubmitResponse(ctx context.Context, in *SubmitResponseReq, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SubmitResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) LeaveStudy(ctx context.Context, in *LeaveStudyMsg, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/LeaveStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) DeleteParticipantData(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/DeleteParticipantData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) UploadParticipantFile(ctx context.Context, opts ...grpc.CallOption) (StudyServiceApi_UploadParticipantFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudyServiceApi_serviceDesc.Streams[0], "/influenzanet.study_service.StudyServiceApi/UploadParticipantFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiUploadParticipantFileClient{stream}
	return x, nil
}

type StudyServiceApi_UploadParticipantFileClient interface {
	Send(*UploadParticipantFileReq) error
	CloseAndRecv() (*FileInfo, error)
	grpc.ClientStream
}

type studyServiceApiUploadParticipantFileClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiUploadParticipantFileClient) Send(m *UploadParticipantFileReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studyServiceApiUploadParticipantFileClient) CloseAndRecv() (*FileInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) RegisterTemporaryParticipant(ctx context.Context, in *RegisterTempParticipantReq, opts ...grpc.CallOption) (*RegisterTempParticipantResponse, error) {
	out := new(RegisterTempParticipantResponse)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RegisterTemporaryParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) ConvertTemporaryToParticipant(ctx context.Context, in *ConvertTempParticipantReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/ConvertTemporaryToParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAssignedSurveysForTemporaryParticipant(ctx context.Context, in *GetAssignedSurveysForTemporaryParticipantReq, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetAssignedSurveysForTemporaryParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudiesForUser(ctx context.Context, in *GetStudiesForUserReq, opts ...grpc.CallOption) (*StudiesForUser, error) {
	out := new(StudiesForUser)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudiesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetActiveStudies(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*Studies, error) {
	out := new(Studies)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetActiveStudies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudySurveyInfos(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*SurveyInfoResp, error) {
	out := new(SurveyInfoResp)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudySurveyInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) HasParticipantStateWithCondition(ctx context.Context, in *ProfilesWithConditionReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/HasParticipantStateWithCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) CreateNewStudy(ctx context.Context, in *NewStudyRequest, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/CreateNewStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAllStudies(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*Studies, error) {
	out := new(Studies)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetAllStudies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveStudyMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RemoveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RemoveStudyMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveStudyRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyStatus(ctx context.Context, in *StudyStatusReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveStudyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyProps(ctx context.Context, in *StudyPropsReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveStudyProps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveSurveyToStudy(ctx context.Context, in *AddSurveyReq, opts ...grpc.CallOption) (*Survey, error) {
	out := new(Survey)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveSurveyToStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetSurveyDefForStudy(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*Survey, error) {
	out := new(Survey)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetSurveyDefForStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RemoveSurveyFromStudy(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RemoveSurveyFromStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) DeleteStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/DeleteStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RunRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*RuleRunSummary, error) {
	out := new(RuleRunSummary)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RunRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudyResponseStatistics(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (*StudyResponseStatistics, error) {
	out := new(StudyResponseStatistics)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudyResponseStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) StreamStudyResponses(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamStudyResponsesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudyServiceApi_serviceDesc.Streams[1], "/influenzanet.study_service.StudyServiceApi/StreamStudyResponses", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiStreamStudyResponsesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_StreamStudyResponsesClient interface {
	Recv() (*SurveyResponse, error)
	grpc.ClientStream
}

type studyServiceApiStreamStudyResponsesClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiStreamStudyResponsesClient) Recv() (*SurveyResponse, error) {
	m := new(SurveyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetResponsesWideFormatCSV(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesWideFormatCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudyServiceApi_serviceDesc.Streams[2], "/influenzanet.study_service.StudyServiceApi/GetResponsesWideFormatCSV", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetResponsesWideFormatCSVClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetResponsesWideFormatCSVClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type studyServiceApiGetResponsesWideFormatCSVClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetResponsesWideFormatCSVClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetResponsesLongFormatCSV(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesLongFormatCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudyServiceApi_serviceDesc.Streams[3], "/influenzanet.study_service.StudyServiceApi/GetResponsesLongFormatCSV", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetResponsesLongFormatCSVClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetResponsesLongFormatCSVClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type studyServiceApiGetResponsesLongFormatCSVClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetResponsesLongFormatCSVClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetResponsesFlatJSON(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesFlatJSONClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudyServiceApi_serviceDesc.Streams[4], "/influenzanet.study_service.StudyServiceApi/GetResponsesFlatJSON", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetResponsesFlatJSONClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetResponsesFlatJSONClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type studyServiceApiGetResponsesFlatJSONClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetResponsesFlatJSONClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetSurveyInfoPreviewCSV(ctx context.Context, in *SurveyInfoExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetSurveyInfoPreviewCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StudyServiceApi_serviceDesc.Streams[5], "/influenzanet.study_service.StudyServiceApi/GetSurveyInfoPreviewCSV", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetSurveyInfoPreviewCSVClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetSurveyInfoPreviewCSVClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type studyServiceApiGetSurveyInfoPreviewCSVClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetSurveyInfoPreviewCSVClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetSurveyInfoPreview(ctx context.Context, in *SurveyInfoExportQuery, opts ...grpc.CallOption) (*SurveyInfoExport, error) {
	out := new(SurveyInfoExport)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetSurveyInfoPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyServiceApiServer is the server API for StudyServiceApi service.
type StudyServiceApiServer interface {
	Status(context.Context, *empty.Empty) (*ServiceStatus, error)
	// Study flow
	EnterStudy(context.Context, *EnterStudyRequest) (*AssignedSurveys, error)
	GetAssignedSurveys(context.Context, *api_types.TokenInfos) (*AssignedSurveys, error)
	GetAssignedSurvey(context.Context, *SurveyReferenceRequest) (*SurveyAndContext, error)
	SubmitResponse(context.Context, *SubmitResponseReq) (*AssignedSurveys, error)
	LeaveStudy(context.Context, *LeaveStudyMsg) (*AssignedSurveys, error)
	DeleteParticipantData(context.Context, *api_types.TokenInfos) (*ServiceStatus, error)
	UploadParticipantFile(StudyServiceApi_UploadParticipantFileServer) error
	//rpc GetParticipantFiles(GetParticipantFilesReq) returns (GetParticipantFilesResp);
	//rpc GetParticipantFile(GetParticipantFileReq) returns (stream Chunk);
	//rpc GetParticipantFilePreview(GetParticipantFileReq) returns (stream Chunk);
	//rpc DeleteParticipantFiles(DeleteParticipantFilesReq) returns (DeleteParticipantFilesResp);
	//rpc BulkDownloadParticipantFiles(BulkDownloadParticipantFilesReq) returns (stream Chunk);
	RegisterTemporaryParticipant(context.Context, *RegisterTempParticipantReq) (*RegisterTempParticipantResponse, error)
	ConvertTemporaryToParticipant(context.Context, *ConvertTempParticipantReq) (*ServiceStatus, error)
	GetAssignedSurveysForTemporaryParticipant(context.Context, *GetAssignedSurveysForTemporaryParticipantReq) (*AssignedSurveys, error)
	// for all profiles (also not active studies):
	GetStudiesForUser(context.Context, *GetStudiesForUserReq) (*StudiesForUser, error)
	// all active studies even if user not in:
	GetActiveStudies(context.Context, *api_types.TokenInfos) (*Studies, error)
	// get info about surveys in a study:
	GetStudySurveyInfos(context.Context, *StudyReferenceReq) (*SurveyInfoResp, error)
	// any user profile is in the study and one state matches condition:
	HasParticipantStateWithCondition(context.Context, *ProfilesWithConditionReq) (*ServiceStatus, error)
	// ---> Study management
	CreateNewStudy(context.Context, *NewStudyRequest) (*Study, error)
	GetAllStudies(context.Context, *api_types.TokenInfos) (*Studies, error)
	GetStudy(context.Context, *StudyReferenceReq) (*Study, error)
	// add, update and remove study members (and roles):
	SaveStudyMember(context.Context, *StudyMemberReq) (*Study, error)
	RemoveStudyMember(context.Context, *StudyMemberReq) (*Study, error)
	SaveStudyRules(context.Context, *StudyRulesReq) (*Study, error)
	SaveStudyStatus(context.Context, *StudyStatusReq) (*Study, error)
	SaveStudyProps(context.Context, *StudyPropsReq) (*Study, error)
	SaveSurveyToStudy(context.Context, *AddSurveyReq) (*Survey, error)
	GetSurveyDefForStudy(context.Context, *SurveyReferenceRequest) (*Survey, error)
	RemoveSurveyFromStudy(context.Context, *SurveyReferenceRequest) (*ServiceStatus, error)
	DeleteStudy(context.Context, *StudyReferenceReq) (*ServiceStatus, error)
	RunRules(context.Context, *StudyRulesReq) (*RuleRunSummary, error)
	// Data access:
	GetStudyResponseStatistics(context.Context, *SurveyResponseQuery) (*StudyResponseStatistics, error)
	StreamStudyResponses(*SurveyResponseQuery, StudyServiceApi_StreamStudyResponsesServer) error
	GetResponsesWideFormatCSV(*ResponseExportQuery, StudyServiceApi_GetResponsesWideFormatCSVServer) error
	GetResponsesLongFormatCSV(*ResponseExportQuery, StudyServiceApi_GetResponsesLongFormatCSVServer) error
	GetResponsesFlatJSON(*ResponseExportQuery, StudyServiceApi_GetResponsesFlatJSONServer) error
	GetSurveyInfoPreviewCSV(*SurveyInfoExportQuery, StudyServiceApi_GetSurveyInfoPreviewCSVServer) error
	GetSurveyInfoPreview(context.Context, *SurveyInfoExportQuery) (*SurveyInfoExport, error)
}

// UnimplementedStudyServiceApiServer can be embedded to have forward compatible implementations.
type UnimplementedStudyServiceApiServer struct {
}

func (*UnimplementedStudyServiceApiServer) Status(context.Context, *empty.Empty) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedStudyServiceApiServer) EnterStudy(context.Context, *EnterStudyRequest) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetAssignedSurveys(context.Context, *api_types.TokenInfos) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedSurveys not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetAssignedSurvey(context.Context, *SurveyReferenceRequest) (*SurveyAndContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedSurvey not implemented")
}
func (*UnimplementedStudyServiceApiServer) SubmitResponse(context.Context, *SubmitResponseReq) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitResponse not implemented")
}
func (*UnimplementedStudyServiceApiServer) LeaveStudy(context.Context, *LeaveStudyMsg) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) DeleteParticipantData(context.Context, *api_types.TokenInfos) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParticipantData not implemented")
}
func (*UnimplementedStudyServiceApiServer) UploadParticipantFile(StudyServiceApi_UploadParticipantFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadParticipantFile not implemented")
}
func (*UnimplementedStudyServiceApiServer) RegisterTemporaryParticipant(context.Context, *RegisterTempParticipantReq) (*RegisterTempParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTemporaryParticipant not implemented")
}
func (*UnimplementedStudyServiceApiServer) ConvertTemporaryToParticipant(context.Context, *ConvertTempParticipantReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertTemporaryToParticipant not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetAssignedSurveysForTemporaryParticipant(context.Context, *GetAssignedSurveysForTemporaryParticipantReq) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedSurveysForTemporaryParticipant not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetStudiesForUser(context.Context, *GetStudiesForUserReq) (*StudiesForUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudiesForUser not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetActiveStudies(context.Context, *api_types.TokenInfos) (*Studies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveStudies not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetStudySurveyInfos(context.Context, *StudyReferenceReq) (*SurveyInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudySurveyInfos not implemented")
}
func (*UnimplementedStudyServiceApiServer) HasParticipantStateWithCondition(context.Context, *ProfilesWithConditionReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasParticipantStateWithCondition not implemented")
}
func (*UnimplementedStudyServiceApiServer) CreateNewStudy(context.Context, *NewStudyRequest) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetAllStudies(context.Context, *api_types.TokenInfos) (*Studies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudies not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetStudy(context.Context, *StudyReferenceReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveStudyMember(context.Context, *StudyMemberReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyMember not implemented")
}
func (*UnimplementedStudyServiceApiServer) RemoveStudyMember(context.Context, *StudyMemberReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStudyMember not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveStudyRules(context.Context, *StudyRulesReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyRules not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveStudyStatus(context.Context, *StudyStatusReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyStatus not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveStudyProps(context.Context, *StudyPropsReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyProps not implemented")
}
func (*UnimplementedStudyServiceApiServer) SaveSurveyToStudy(context.Context, *AddSurveyReq) (*Survey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSurveyToStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetSurveyDefForStudy(context.Context, *SurveyReferenceRequest) (*Survey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyDefForStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) RemoveSurveyFromStudy(context.Context, *SurveyReferenceRequest) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSurveyFromStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) DeleteStudy(context.Context, *StudyReferenceReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudy not implemented")
}
func (*UnimplementedStudyServiceApiServer) RunRules(context.Context, *StudyRulesReq) (*RuleRunSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRules not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetStudyResponseStatistics(context.Context, *SurveyResponseQuery) (*StudyResponseStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyResponseStatistics not implemented")
}
func (*UnimplementedStudyServiceApiServer) StreamStudyResponses(*SurveyResponseQuery, StudyServiceApi_StreamStudyResponsesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStudyResponses not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetResponsesWideFormatCSV(*ResponseExportQuery, StudyServiceApi_GetResponsesWideFormatCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResponsesWideFormatCSV not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetResponsesLongFormatCSV(*ResponseExportQuery, StudyServiceApi_GetResponsesLongFormatCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResponsesLongFormatCSV not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetResponsesFlatJSON(*ResponseExportQuery, StudyServiceApi_GetResponsesFlatJSONServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResponsesFlatJSON not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetSurveyInfoPreviewCSV(*SurveyInfoExportQuery, StudyServiceApi_GetSurveyInfoPreviewCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSurveyInfoPreviewCSV not implemented")
}
func (*UnimplementedStudyServiceApiServer) GetSurveyInfoPreview(context.Context, *SurveyInfoExportQuery) (*SurveyInfoExport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyInfoPreview not implemented")
}

func RegisterStudyServiceApiServer(s *grpc.Server, srv StudyServiceApiServer) {
	s.RegisterService(&_StudyServiceApi_serviceDesc, srv)
}

func _StudyServiceApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_EnterStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).EnterStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/EnterStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).EnterStudy(ctx, req.(*EnterStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAssignedSurveys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAssignedSurveys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetAssignedSurveys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAssignedSurveys(ctx, req.(*api_types.TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAssignedSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAssignedSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetAssignedSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAssignedSurvey(ctx, req.(*SurveyReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SubmitResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SubmitResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SubmitResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SubmitResponse(ctx, req.(*SubmitResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_LeaveStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveStudyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).LeaveStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/LeaveStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).LeaveStudy(ctx, req.(*LeaveStudyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_DeleteParticipantData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).DeleteParticipantData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/DeleteParticipantData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).DeleteParticipantData(ctx, req.(*api_types.TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_UploadParticipantFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudyServiceApiServer).UploadParticipantFile(&studyServiceApiUploadParticipantFileServer{stream})
}

type StudyServiceApi_UploadParticipantFileServer interface {
	SendAndClose(*FileInfo) error
	Recv() (*UploadParticipantFileReq, error)
	grpc.ServerStream
}

type studyServiceApiUploadParticipantFileServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiUploadParticipantFileServer) SendAndClose(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studyServiceApiUploadParticipantFileServer) Recv() (*UploadParticipantFileReq, error) {
	m := new(UploadParticipantFileReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StudyServiceApi_RegisterTemporaryParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTempParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RegisterTemporaryParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RegisterTemporaryParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RegisterTemporaryParticipant(ctx, req.(*RegisterTempParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_ConvertTemporaryToParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertTempParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).ConvertTemporaryToParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/ConvertTemporaryToParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).ConvertTemporaryToParticipant(ctx, req.(*ConvertTempParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAssignedSurveysForTemporaryParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedSurveysForTemporaryParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAssignedSurveysForTemporaryParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetAssignedSurveysForTemporaryParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAssignedSurveysForTemporaryParticipant(ctx, req.(*GetAssignedSurveysForTemporaryParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudiesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudiesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudiesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudiesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudiesForUser(ctx, req.(*GetStudiesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetActiveStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetActiveStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetActiveStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetActiveStudies(ctx, req.(*api_types.TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudySurveyInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudySurveyInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudySurveyInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudySurveyInfos(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_HasParticipantStateWithCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfilesWithConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).HasParticipantStateWithCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/HasParticipantStateWithCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).HasParticipantStateWithCondition(ctx, req.(*ProfilesWithConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_CreateNewStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).CreateNewStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/CreateNewStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).CreateNewStudy(ctx, req.(*NewStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAllStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAllStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetAllStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAllStudies(ctx, req.(*api_types.TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudy(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveStudyMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyMember(ctx, req.(*StudyMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RemoveStudyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RemoveStudyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RemoveStudyMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RemoveStudyMember(ctx, req.(*StudyMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveStudyRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyRules(ctx, req.(*StudyRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveStudyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyStatus(ctx, req.(*StudyStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyPropsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveStudyProps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyProps(ctx, req.(*StudyPropsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveSurveyToStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSurveyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveSurveyToStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveSurveyToStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveSurveyToStudy(ctx, req.(*AddSurveyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetSurveyDefForStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetSurveyDefForStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetSurveyDefForStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetSurveyDefForStudy(ctx, req.(*SurveyReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RemoveSurveyFromStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RemoveSurveyFromStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RemoveSurveyFromStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RemoveSurveyFromStudy(ctx, req.(*SurveyReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_DeleteStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).DeleteStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/DeleteStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).DeleteStudy(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RunRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RunRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RunRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RunRules(ctx, req.(*StudyRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudyResponseStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyResponseQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudyResponseStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudyResponseStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudyResponseStatistics(ctx, req.(*SurveyResponseQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_StreamStudyResponses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SurveyResponseQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).StreamStudyResponses(m, &studyServiceApiStreamStudyResponsesServer{stream})
}

type StudyServiceApi_StreamStudyResponsesServer interface {
	Send(*SurveyResponse) error
	grpc.ServerStream
}

type studyServiceApiStreamStudyResponsesServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiStreamStudyResponsesServer) Send(m *SurveyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetResponsesWideFormatCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResponseExportQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetResponsesWideFormatCSV(m, &studyServiceApiGetResponsesWideFormatCSVServer{stream})
}

type StudyServiceApi_GetResponsesWideFormatCSVServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type studyServiceApiGetResponsesWideFormatCSVServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetResponsesWideFormatCSVServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetResponsesLongFormatCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResponseExportQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetResponsesLongFormatCSV(m, &studyServiceApiGetResponsesLongFormatCSVServer{stream})
}

type StudyServiceApi_GetResponsesLongFormatCSVServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type studyServiceApiGetResponsesLongFormatCSVServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetResponsesLongFormatCSVServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetResponsesFlatJSON_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResponseExportQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetResponsesFlatJSON(m, &studyServiceApiGetResponsesFlatJSONServer{stream})
}

type StudyServiceApi_GetResponsesFlatJSONServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type studyServiceApiGetResponsesFlatJSONServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetResponsesFlatJSONServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetSurveyInfoPreviewCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SurveyInfoExportQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetSurveyInfoPreviewCSV(m, &studyServiceApiGetSurveyInfoPreviewCSVServer{stream})
}

type StudyServiceApi_GetSurveyInfoPreviewCSVServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type studyServiceApiGetSurveyInfoPreviewCSVServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetSurveyInfoPreviewCSVServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetSurveyInfoPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyInfoExportQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetSurveyInfoPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetSurveyInfoPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetSurveyInfoPreview(ctx, req.(*SurveyInfoExportQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudyServiceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "influenzanet.study_service.StudyServiceApi",
	HandlerType: (*StudyServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _StudyServiceApi_Status_Handler,
		},
		{
			MethodName: "EnterStudy",
			Handler:    _StudyServiceApi_EnterStudy_Handler,
		},
		{
			MethodName: "GetAssignedSurveys",
			Handler:    _StudyServiceApi_GetAssignedSurveys_Handler,
		},
		{
			MethodName: "GetAssignedSurvey",
			Handler:    _StudyServiceApi_GetAssignedSurvey_Handler,
		},
		{
			MethodName: "SubmitResponse",
			Handler:    _StudyServiceApi_SubmitResponse_Handler,
		},
		{
			MethodName: "LeaveStudy",
			Handler:    _StudyServiceApi_LeaveStudy_Handler,
		},
		{
			MethodName: "DeleteParticipantData",
			Handler:    _StudyServiceApi_DeleteParticipantData_Handler,
		},
		{
			MethodName: "RegisterTemporaryParticipant",
			Handler:    _StudyServiceApi_RegisterTemporaryParticipant_Handler,
		},
		{
			MethodName: "ConvertTemporaryToParticipant",
			Handler:    _StudyServiceApi_ConvertTemporaryToParticipant_Handler,
		},
		{
			MethodName: "GetAssignedSurveysForTemporaryParticipant",
			Handler:    _StudyServiceApi_GetAssignedSurveysForTemporaryParticipant_Handler,
		},
		{
			MethodName: "GetStudiesForUser",
			Handler:    _StudyServiceApi_GetStudiesForUser_Handler,
		},
		{
			MethodName: "GetActiveStudies",
			Handler:    _StudyServiceApi_GetActiveStudies_Handler,
		},
		{
			MethodName: "GetStudySurveyInfos",
			Handler:    _StudyServiceApi_GetStudySurveyInfos_Handler,
		},
		{
			MethodName: "HasParticipantStateWithCondition",
			Handler:    _StudyServiceApi_HasParticipantStateWithCondition_Handler,
		},
		{
			MethodName: "CreateNewStudy",
			Handler:    _StudyServiceApi_CreateNewStudy_Handler,
		},
		{
			MethodName: "GetAllStudies",
			Handler:    _StudyServiceApi_GetAllStudies_Handler,
		},
		{
			MethodName: "GetStudy",
			Handler:    _StudyServiceApi_GetStudy_Handler,
		},
		{
			MethodName: "SaveStudyMember",
			Handler:    _StudyServiceApi_SaveStudyMember_Handler,
		},
		{
			MethodName: "RemoveStudyMember",
			Handler:    _StudyServiceApi_RemoveStudyMember_Handler,
		},
		{
			MethodName: "SaveStudyRules",
			Handler:    _StudyServiceApi_SaveStudyRules_Handler,
		},
		{
			MethodName: "SaveStudyStatus",
			Handler:    _StudyServiceApi_SaveStudyStatus_Handler,
		},
		{
			MethodName: "SaveStudyProps",
			Handler:    _StudyServiceApi_SaveStudyProps_Handler,
		},
		{
			MethodName: "SaveSurveyToStudy",
			Handler:    _StudyServiceApi_SaveSurveyToStudy_Handler,
		},
		{
			MethodName: "GetSurveyDefForStudy",
			Handler:    _StudyServiceApi_GetSurveyDefForStudy_Handler,
		},
		{
			MethodName: "RemoveSurveyFromStudy",
			Handler:    _StudyServiceApi_RemoveSurveyFromStudy_Handler,
		},
		{
			MethodName: "DeleteStudy",
			Handler:    _StudyServiceApi_DeleteStudy_Handler,
		},
		{
			MethodName: "RunRules",
			Handler:    _StudyServiceApi_RunRules_Handler,
		},
		{
			MethodName: "GetStudyResponseStatistics",
			Handler:    _StudyServiceApi_GetStudyResponseStatistics_Handler,
		},
		{
			MethodName: "GetSurveyInfoPreview",
			Handler:    _StudyServiceApi_GetSurveyInfoPreview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadParticipantFile",
			Handler:       _StudyServiceApi_UploadParticipantFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamStudyResponses",
			Handler:       _StudyServiceApi_StreamStudyResponses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResponsesWideFormatCSV",
			Handler:       _StudyServiceApi_GetResponsesWideFormatCSV_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResponsesLongFormatCSV",
			Handler:       _StudyServiceApi_GetResponsesLongFormatCSV_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResponsesFlatJSON",
			Handler:       _StudyServiceApi_GetResponsesFlatJSON_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSurveyInfoPreviewCSV",
			Handler:       _StudyServiceApi_GetSurveyInfoPreviewCSV_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "study_service/study-service.proto",
}
