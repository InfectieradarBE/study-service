syntax = "proto3";

package inf.study_service;
option go_package = "github.com/influenzanet/study-service/pkg/api";

import "api/auth.proto";
import "api/study.proto";
import "api/survey.proto";
import "api/survey-response.proto";
import "google/protobuf/empty.proto";

service StudyServiceApi {
  rpc Status(google.protobuf.Empty) returns (ServiceStatus);

  // Study flow
  rpc EnterStudy(EnterStudyRequest) returns (inf.study.AssignedSurveys);
  rpc GetAssignedSurveys(inf.auth.TokenInfos)
      returns (inf.study.AssignedSurveys);
  rpc GetAssignedSurvey(SurveyReferenceRequest) returns (SurveyAndContext);
  rpc PostponeSurvey(PostponeSurveyRequest) returns (inf.study.AssignedSurveys);
  rpc SubmitStatusReport(StatusReportRequest)
      returns (inf.study.AssignedSurveys);
  rpc SubmitResponse(SubmitResponseReq) returns (inf.study.AssignedSurveys);
  rpc LeaveStudy(LeaveStudyMsg) returns (ServiceStatus);

  // Study management
  rpc CreateNewStudy(NewStudyRequest) returns (inf.study.Study);
  rpc SaveSurveyToStudy(AddSurveyReq)
      returns (inf.survey.Survey); // add or update
  rpc RemoveSurveyFromStudy(SurveyReferenceRequest) returns (ServiceStatus);
  rpc GetStudySurveyInfos(StudyReferenceReq) returns (SurveyInfoResp);

  // TODO: get studies
  // TODO: get study infos
  // TODO: get study survey infos
  // TODO: Update study // manage roles
  // TODO: Archive study
}

message ServiceStatus {
  enum StatusValue {
    NORMAL = 0;
    PROBLEM = 1;
  }
  StatusValue status = 1;
  string msg = 2;
  string version = 3;
}

message NewStudyRequest {
  inf.auth.TokenInfos token = 1;
  inf.study.Study study = 2;
}

message SurveyAndContext {
  inf.survey.Survey survey = 1;
  inf.survey.SurveyContext context = 2;
  inf.survey_response.SurveyResponse prefill = 3;
}

message StudyReferenceReq {
  inf.auth.TokenInfos token = 1;
  string study_key = 2;
}

message SurveyInfoResp {
  message SurveyInfo {
    string key = 1;
    repeated inf.survey.LocalisedObject name = 2;
    repeated inf.survey.LocalisedObject description = 3;
  }
  repeated SurveyInfo infos = 1;
}

message AddSurveyReq {
  inf.auth.TokenInfos token = 1;
  string study_key = 2;
  inf.survey.Survey survey = 3;
}

message SubmitResponseReq {
  inf.auth.TokenInfos token = 1; // identifies the user who is submitting
  string study_key = 2;
  inf.survey_response.SurveyResponse response = 3;
}

message EnterStudyRequest {
  inf.auth.TokenInfos token = 1;
  string study_key = 2;
}

message LeaveStudyMsg {
  inf.auth.TokenInfos token = 1;
  string study_key = 2;
}

message SurveyReferenceRequest {
  inf.auth.TokenInfos token = 1;
  string study_key = 2;
  string survey_key = 3;
}

message PostponeSurveyRequest {
  inf.auth.TokenInfos token = 1;
  string study_key = 2;
  string survey_key = 3;
  int64 delay = 4;
}

message StatusReportRequest {
  inf.auth.TokenInfos token = 1;
  inf.survey_response.SurveyResponse status_survey = 2;
}
